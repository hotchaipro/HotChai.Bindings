//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.IronSource.Sdk.Utils {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']"
	[global::Android.Runtime.Register ("com/ironsource/sdk/utils/IronSourceStorageUtils", DoNotGenerateAcw=true)]
	public partial class IronSourceStorageUtils : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/ironsource/sdk/utils/IronSourceStorageUtils", typeof (IronSourceStorageUtils));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected IronSourceStorageUtils (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/constructor[@name='IronSourceStorageUtils' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe IronSourceStorageUtils () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		public static unsafe bool IsUxt {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/method[@name='isUxt' and count(parameter)=0]"
			[Register ("isUxt", "()Z", "")]
			get {
				const string __id = "isUxt.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/method[@name='buildAbsolutePathToDirInCache' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("buildAbsolutePathToDirInCache", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string BuildAbsolutePathToDirInCache (string p0, string p1)
		{
			const string __id = "buildAbsolutePathToDirInCache.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_p0 = JNIEnv.NewString ((string)p0);
			IntPtr native_p1 = JNIEnv.NewString ((string)p1);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_p0);
				__args [1] = new JniArgumentValue (native_p1);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_p0);
				JNIEnv.DeleteLocalRef (native_p1);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/method[@name='buildFilesMap' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("buildFilesMap", "(Ljava/lang/String;Ljava/lang/String;)Lorg/json/JSONObject;", "")]
		public static unsafe global::Org.Json.JSONObject BuildFilesMap (string p0, string p1)
		{
			const string __id = "buildFilesMap.(Ljava/lang/String;Ljava/lang/String;)Lorg/json/JSONObject;";
			IntPtr native_p0 = JNIEnv.NewString ((string)p0);
			IntPtr native_p1 = JNIEnv.NewString ((string)p1);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_p0);
				__args [1] = new JniArgumentValue (native_p1);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Org.Json.JSONObject> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_p0);
				JNIEnv.DeleteLocalRef (native_p1);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/method[@name='deleteCacheDirectories' and count(parameter)=1 and parameter[1][@type='android.content.Context']]"
		[Register ("deleteCacheDirectories", "(Landroid/content/Context;)V", "")]
		public static unsafe void DeleteCacheDirectories (global::Android.Content.Context p0)
		{
			const string __id = "deleteCacheDirectories.(Landroid/content/Context;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/method[@name='deleteFilesDirectories' and count(parameter)=1 and parameter[1][@type='android.content.Context']]"
		[Register ("deleteFilesDirectories", "(Landroid/content/Context;)V", "")]
		public static unsafe void DeleteFilesDirectories (global::Android.Content.Context p0)
		{
			const string __id = "deleteFilesDirectories.(Landroid/content/Context;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/method[@name='deleteFolder' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("deleteFolder", "(Ljava/lang/String;)Z", "")]
		public static unsafe bool DeleteFolder (string p0)
		{
			const string __id = "deleteFolder.(Ljava/lang/String;)Z";
			IntPtr native_p0 = JNIEnv.NewString ((string)p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_p0);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/method[@name='deleteFolderContentRecursive' and count(parameter)=1 and parameter[1][@type='java.io.File']]"
		[Register ("deleteFolderContentRecursive", "(Ljava/io/File;)Z", "")]
		public static unsafe bool DeleteFolderContentRecursive (global::Java.IO.File p0)
		{
			const string __id = "deleteFolderContentRecursive.(Ljava/io/File;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/method[@name='ensurePathSafety' and count(parameter)=2 and parameter[1][@type='java.io.File'] and parameter[2][@type='java.lang.String']]"
		[Register ("ensurePathSafety", "(Ljava/io/File;Ljava/lang/String;)V", "")]
		public static unsafe void EnsurePathSafety (global::Java.IO.File p0, string p1)
		{
			const string __id = "ensurePathSafety.(Ljava/io/File;Ljava/lang/String;)V";
			IntPtr native_p1 = JNIEnv.NewString ((string)p1);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				__args [1] = new JniArgumentValue (native_p1);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_p1);
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/method[@name='getCachedFilesMap' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("getCachedFilesMap", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string GetCachedFilesMap (string p0, string p1)
		{
			const string __id = "getCachedFilesMap.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_p0 = JNIEnv.NewString ((string)p0);
			IntPtr native_p1 = JNIEnv.NewString ((string)p1);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_p0);
				__args [1] = new JniArgumentValue (native_p1);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_p0);
				JNIEnv.DeleteLocalRef (native_p1);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/method[@name='getDiskCacheDirPath' and count(parameter)=1 and parameter[1][@type='android.content.Context']]"
		[Register ("getDiskCacheDirPath", "(Landroid/content/Context;)Ljava/lang/String;", "")]
		public static unsafe string GetDiskCacheDirPath (global::Android.Content.Context p0)
		{
			const string __id = "getDiskCacheDirPath.(Landroid/content/Context;)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/method[@name='getNetworkStorageDir' and count(parameter)=1 and parameter[1][@type='android.content.Context']]"
		[Register ("getNetworkStorageDir", "(Landroid/content/Context;)Ljava/lang/String;", "")]
		public static unsafe string GetNetworkStorageDir (global::Android.Content.Context p0)
		{
			const string __id = "getNetworkStorageDir.(Landroid/content/Context;)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/method[@name='isPathExist' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("isPathExist", "(Ljava/lang/String;Ljava/lang/String;)Z", "")]
		public static unsafe bool IsPathExist (string p0, string p1)
		{
			const string __id = "isPathExist.(Ljava/lang/String;Ljava/lang/String;)Z";
			IntPtr native_p0 = JNIEnv.NewString ((string)p0);
			IntPtr native_p1 = JNIEnv.NewString ((string)p1);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_p0);
				__args [1] = new JniArgumentValue (native_p1);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_p0);
				JNIEnv.DeleteLocalRef (native_p1);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/method[@name='makeDir' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("makeDir", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string MakeDir (string p0)
		{
			const string __id = "makeDir.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_p0 = JNIEnv.NewString ((string)p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_p0);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/method[@name='renameFile' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("renameFile", "(Ljava/lang/String;Ljava/lang/String;)Z", "")]
		public static unsafe bool RenameFile (string p0, string p1)
		{
			const string __id = "renameFile.(Ljava/lang/String;Ljava/lang/String;)Z";
			IntPtr native_p0 = JNIEnv.NewString ((string)p0);
			IntPtr native_p1 = JNIEnv.NewString ((string)p1);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_p0);
				__args [1] = new JniArgumentValue (native_p1);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_p0);
				JNIEnv.DeleteLocalRef (native_p1);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.ironsource.sdk.utils']/class[@name='IronSourceStorageUtils']/method[@name='saveFile' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("saveFile", "([BLjava/lang/String;)I", "")]
		public static unsafe int SaveFile (byte[] p0, string p1)
		{
			const string __id = "saveFile.([BLjava/lang/String;)I";
			IntPtr native_p0 = JNIEnv.NewArray (p0);
			IntPtr native_p1 = JNIEnv.NewString ((string)p1);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_p0);
				__args [1] = new JniArgumentValue (native_p1);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (p0 != null) {
					JNIEnv.CopyArray (native_p0, p0);
					JNIEnv.DeleteLocalRef (native_p0);
				}
				JNIEnv.DeleteLocalRef (native_p1);
				global::System.GC.KeepAlive (p0);
			}
		}

	}
}
