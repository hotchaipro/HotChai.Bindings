//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.GameAnalytics.Sdk.Errorreporter {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.gameanalytics.sdk.errorreporter']/class[@name='ExceptionReporter']"
	[global::Android.Runtime.Register ("com/gameanalytics/sdk/errorreporter/ExceptionReporter", DoNotGenerateAcw=true)]
	public sealed partial class ExceptionReporter : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/gameanalytics/sdk/errorreporter/ExceptionReporter", typeof (ExceptionReporter));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		internal ExceptionReporter (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.gameanalytics.sdk.errorreporter']/class[@name='ExceptionReporter']/method[@name='register' and count(parameter)=1 and parameter[1][@type='android.content.Context']]"
		[Register ("register", "(Landroid/content/Context;)Lcom/gameanalytics/sdk/errorreporter/ExceptionReporter;", "")]
		public static unsafe global::Com.GameAnalytics.Sdk.Errorreporter.ExceptionReporter Register (global::Android.Content.Context context)
		{
			const string __id = "register.(Landroid/content/Context;)Lcom/gameanalytics/sdk/errorreporter/ExceptionReporter;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Com.GameAnalytics.Sdk.Errorreporter.ExceptionReporter> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (context);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.gameanalytics.sdk.errorreporter']/class[@name='ExceptionReporter']/method[@name='reportException' and count(parameter)=2 and parameter[1][@type='java.lang.Thread'] and parameter[2][@type='java.lang.Throwable']]"
		[Register ("reportException", "(Ljava/lang/Thread;Ljava/lang/Throwable;)V", "")]
		public unsafe void ReportException (global::Java.Lang.Thread thread, global::Java.Lang.Throwable ex)
		{
			const string __id = "reportException.(Ljava/lang/Thread;Ljava/lang/Throwable;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((thread == null) ? IntPtr.Zero : ((global::Java.Lang.Object) thread).Handle);
				__args [1] = new JniArgumentValue ((ex == null) ? IntPtr.Zero : ((global::Java.Lang.Throwable) ex).Handle);
				_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (thread);
				global::System.GC.KeepAlive (ex);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.gameanalytics.sdk.errorreporter']/class[@name='ExceptionReporter']/method[@name='reportException' and count(parameter)=3 and parameter[1][@type='java.lang.Thread'] and parameter[2][@type='java.lang.Throwable'] and parameter[3][@type='java.lang.String']]"
		[Register ("reportException", "(Ljava/lang/Thread;Ljava/lang/Throwable;Ljava/lang/String;)V", "")]
		public unsafe void ReportException (global::Java.Lang.Thread thread, global::Java.Lang.Throwable ex, string extraMessage)
		{
			const string __id = "reportException.(Ljava/lang/Thread;Ljava/lang/Throwable;Ljava/lang/String;)V";
			IntPtr native_extraMessage = JNIEnv.NewString ((string)extraMessage);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((thread == null) ? IntPtr.Zero : ((global::Java.Lang.Object) thread).Handle);
				__args [1] = new JniArgumentValue ((ex == null) ? IntPtr.Zero : ((global::Java.Lang.Throwable) ex).Handle);
				__args [2] = new JniArgumentValue (native_extraMessage);
				_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_extraMessage);
				global::System.GC.KeepAlive (thread);
				global::System.GC.KeepAlive (ex);
			}
		}

	}
}
