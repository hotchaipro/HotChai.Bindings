//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.GameAnalytics.Sdk.Utilities {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.gameanalytics.sdk.utilities']/class[@name='Reflection']"
	[global::Android.Runtime.Register ("com/gameanalytics/sdk/utilities/Reflection", DoNotGenerateAcw=true)]
	public partial class Reflection : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/gameanalytics/sdk/utilities/Reflection", typeof (Reflection));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Reflection (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.gameanalytics.sdk.utilities']/class[@name='Reflection']/constructor[@name='Reflection' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe Reflection () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.gameanalytics.sdk.utilities']/class[@name='Reflection']/method[@name='getAdId' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='android.content.Context']]"
		[Register ("getAdId", "(Ljava/lang/String;Landroid/content/Context;)Ljava/lang/String;", "")]
		public static unsafe string GetAdId (string packageName, global::Android.Content.Context context)
		{
			const string __id = "getAdId.(Ljava/lang/String;Landroid/content/Context;)Ljava/lang/String;";
			IntPtr native_packageName = JNIEnv.NewString ((string)packageName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_packageName);
				__args [1] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_packageName);
				global::System.GC.KeepAlive (context);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.gameanalytics.sdk.utilities']/class[@name='Reflection']/method[@name='invokeInstanceMethod' and count(parameter)=4 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.Class[]'] and parameter[4][@type='java.lang.Object...']]"
		[Register ("invokeInstanceMethod", "(Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object InvokeInstanceMethod (global::Java.Lang.Object instance, string methodName, global::Java.Lang.Class[] cArgs, params global::Java.Lang.Object[] args)
		{
			const string __id = "invokeInstanceMethod.(Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;";
			IntPtr native_methodName = JNIEnv.NewString ((string)methodName);
			IntPtr native_cArgs = JNIEnv.NewArray (cArgs);
			IntPtr native_args = JNIEnv.NewArray (args);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue ((instance == null) ? IntPtr.Zero : ((global::Java.Lang.Object) instance).Handle);
				__args [1] = new JniArgumentValue (native_methodName);
				__args [2] = new JniArgumentValue (native_cArgs);
				__args [3] = new JniArgumentValue (native_args);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_methodName);
				if (cArgs != null) {
					JNIEnv.CopyArray (native_cArgs, cArgs);
					JNIEnv.DeleteLocalRef (native_cArgs);
				}
				if (args != null) {
					JNIEnv.CopyArray (native_args, args);
					JNIEnv.DeleteLocalRef (native_args);
				}
				global::System.GC.KeepAlive (instance);
				global::System.GC.KeepAlive (cArgs);
				global::System.GC.KeepAlive (args);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.gameanalytics.sdk.utilities']/class[@name='Reflection']/method[@name='invokeMethod' and count(parameter)=5 and parameter[1][@type='java.lang.Class'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.Object'] and parameter[4][@type='java.lang.Class[]'] and parameter[5][@type='java.lang.Object...']]"
		[Register ("invokeMethod", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object InvokeMethod (global::Java.Lang.Class classObject, string methodName, global::Java.Lang.Object instance, global::Java.Lang.Class[] cArgs, params global::Java.Lang.Object[] args)
		{
			const string __id = "invokeMethod.(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;";
			IntPtr native_methodName = JNIEnv.NewString ((string)methodName);
			IntPtr native_cArgs = JNIEnv.NewArray (cArgs);
			IntPtr native_args = JNIEnv.NewArray (args);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue ((classObject == null) ? IntPtr.Zero : ((global::Java.Lang.Object) classObject).Handle);
				__args [1] = new JniArgumentValue (native_methodName);
				__args [2] = new JniArgumentValue ((instance == null) ? IntPtr.Zero : ((global::Java.Lang.Object) instance).Handle);
				__args [3] = new JniArgumentValue (native_cArgs);
				__args [4] = new JniArgumentValue (native_args);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_methodName);
				if (cArgs != null) {
					JNIEnv.CopyArray (native_cArgs, cArgs);
					JNIEnv.DeleteLocalRef (native_cArgs);
				}
				if (args != null) {
					JNIEnv.CopyArray (native_args, args);
					JNIEnv.DeleteLocalRef (native_args);
				}
				global::System.GC.KeepAlive (classObject);
				global::System.GC.KeepAlive (instance);
				global::System.GC.KeepAlive (cArgs);
				global::System.GC.KeepAlive (args);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.gameanalytics.sdk.utilities']/class[@name='Reflection']/method[@name='invokeStaticMethod' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.Class[]'] and parameter[4][@type='java.lang.Object...']]"
		[Register ("invokeStaticMethod", "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object InvokeStaticMethod (string className, string methodName, global::Java.Lang.Class[] cArgs, params global::Java.Lang.Object[] args)
		{
			const string __id = "invokeStaticMethod.(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;";
			IntPtr native_className = JNIEnv.NewString ((string)className);
			IntPtr native_methodName = JNIEnv.NewString ((string)methodName);
			IntPtr native_cArgs = JNIEnv.NewArray (cArgs);
			IntPtr native_args = JNIEnv.NewArray (args);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_className);
				__args [1] = new JniArgumentValue (native_methodName);
				__args [2] = new JniArgumentValue (native_cArgs);
				__args [3] = new JniArgumentValue (native_args);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_className);
				JNIEnv.DeleteLocalRef (native_methodName);
				if (cArgs != null) {
					JNIEnv.CopyArray (native_cArgs, cArgs);
					JNIEnv.DeleteLocalRef (native_cArgs);
				}
				if (args != null) {
					JNIEnv.CopyArray (native_args, args);
					JNIEnv.DeleteLocalRef (native_args);
				}
				global::System.GC.KeepAlive (cArgs);
				global::System.GC.KeepAlive (args);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.gameanalytics.sdk.utilities']/class[@name='Reflection']/method[@name='isInstantApp' and count(parameter)=1 and parameter[1][@type='android.content.Context']]"
		[Register ("isInstantApp", "(Landroid/content/Context;)Ljava/lang/Boolean;", "")]
		public static unsafe global::Java.Lang.Boolean IsInstantApp (global::Android.Content.Context context)
		{
			const string __id = "isInstantApp.(Landroid/content/Context;)Ljava/lang/Boolean;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Boolean> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (context);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.gameanalytics.sdk.utilities']/class[@name='Reflection']/method[@name='isLimitAdTrackingEnabled' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='android.content.Context']]"
		[Register ("isLimitAdTrackingEnabled", "(Ljava/lang/String;Landroid/content/Context;)Ljava/lang/Boolean;", "")]
		public static unsafe global::Java.Lang.Boolean IsLimitAdTrackingEnabled (string packageName, global::Android.Content.Context context)
		{
			const string __id = "isLimitAdTrackingEnabled.(Ljava/lang/String;Landroid/content/Context;)Ljava/lang/Boolean;";
			IntPtr native_packageName = JNIEnv.NewString ((string)packageName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_packageName);
				__args [1] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Boolean> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_packageName);
				global::System.GC.KeepAlive (context);
			}
		}

	}
}
