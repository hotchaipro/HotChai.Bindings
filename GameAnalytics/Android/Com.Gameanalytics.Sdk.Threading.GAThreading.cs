//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.GameAnalytics.Sdk.Threading {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.gameanalytics.sdk.threading']/class[@name='GAThreading']"
	[global::Android.Runtime.Register ("com/gameanalytics/sdk/threading/GAThreading", DoNotGenerateAcw=true)]
	public sealed partial class GAThreading : global::Java.Util.Timer {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/gameanalytics/sdk/threading/GAThreading", typeof (GAThreading));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		internal GAThreading (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.gameanalytics.sdk.threading']/class[@name='GAThreading']/method[@name='performTaskDelayed' and count(parameter)=2 and parameter[1][@type='com.gameanalytics.sdk.threading.IBlock'] and parameter[2][@type='long']]"
		[Register ("performTaskDelayed", "(Lcom/gameanalytics/sdk/threading/IBlock;J)V", "")]
		public static unsafe void PerformTaskDelayed (global::Com.GameAnalytics.Sdk.Threading.IBlock taskBlock, long delayInSeconds)
		{
			const string __id = "performTaskDelayed.(Lcom/gameanalytics/sdk/threading/IBlock;J)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((taskBlock == null) ? IntPtr.Zero : ((global::Java.Lang.Object) taskBlock).Handle);
				__args [1] = new JniArgumentValue (delayInSeconds);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (taskBlock);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.gameanalytics.sdk.threading']/class[@name='GAThreading']/method[@name='performTaskOnGAThread' and count(parameter)=1 and parameter[1][@type='com.gameanalytics.sdk.threading.IBlock']]"
		[Register ("performTaskOnGAThread", "(Lcom/gameanalytics/sdk/threading/IBlock;)V", "")]
		public static unsafe void PerformTaskOnGAThread (global::Com.GameAnalytics.Sdk.Threading.IBlock taskBlock)
		{
			const string __id = "performTaskOnGAThread.(Lcom/gameanalytics/sdk/threading/IBlock;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((taskBlock == null) ? IntPtr.Zero : ((global::Java.Lang.Object) taskBlock).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (taskBlock);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.gameanalytics.sdk.threading']/class[@name='GAThreading']/method[@name='scheduleTimer' and count(parameter)=2 and parameter[1][@type='double'] and parameter[2][@type='com.gameanalytics.sdk.threading.IBlock']]"
		[Register ("scheduleTimer", "(DLcom/gameanalytics/sdk/threading/IBlock;)V", "")]
		public static unsafe void ScheduleTimer (double interval, global::Com.GameAnalytics.Sdk.Threading.IBlock @callback)
		{
			const string __id = "scheduleTimer.(DLcom/gameanalytics/sdk/threading/IBlock;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (interval);
				__args [1] = new JniArgumentValue ((@callback == null) ? IntPtr.Zero : ((global::Java.Lang.Object) @callback).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (@callback);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.gameanalytics.sdk.threading']/class[@name='GAThreading']/method[@name='start' and count(parameter)=0]"
		[Register ("start", "()V", "")]
		public static unsafe void Start ()
		{
			const string __id = "start.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.gameanalytics.sdk.threading']/class[@name='GAThreading']/method[@name='stop' and count(parameter)=0]"
		[Register ("stop", "()V", "")]
		public static unsafe void Stop ()
		{
			const string __id = "stop.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

	}
}
