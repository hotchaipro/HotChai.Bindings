//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Singular.Sdk {

	public enum LogLevel
	{
		None = 0,
		Warn = 1,
		Info = 2,
		Debug = 3,
	}

	// Metadata.xml XPath class reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']"
	[global::Android.Runtime.Register ("com/singular/sdk/SingularConfig", DoNotGenerateAcw=true)]
	public partial class SingularConfig : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='apiKey']"
		[Register ("apiKey")]
		public string ApiKey {
			get {
				const string __id = "apiKey.Ljava/lang/String;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "apiKey.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string)value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='approvedDomains']"
		[Register ("approvedDomains")]
		[global::System.Obsolete (@"deprecated")]
		public global::System.Collections.IList ApprovedDomains {
			get {
				const string __id = "approvedDomains.Ljava/util/List;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Android.Runtime.JavaList.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "approvedDomains.Ljava/util/List;";

				IntPtr native_value = global::Android.Runtime.JavaList.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='collectOAID']"
		[Register ("collectOAID")]
		public bool CollectOAID {
			get {
				const string __id = "collectOAID.Z";

				var __v = _members.InstanceFields.GetBooleanValue (__id, this);
				return __v;
			}
			set {
				const string __id = "collectOAID.Z";

				try {
					_members.InstanceFields.SetValue (__id, this, value);
				} finally {
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='customSdid']"
		[Register ("customSdid")]
		public string CustomSdid {
			get {
				const string __id = "customSdid.Ljava/lang/String;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "customSdid.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string)value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='customUserId']"
		[Register ("customUserId")]
		public string CustomUserId {
			get {
				const string __id = "customUserId.Ljava/lang/String;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "customUserId.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string)value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='ddlHandler']"
		[Register ("ddlHandler")]
		public global::Com.Singular.Sdk.SingularConfig.DDLHandler DdlHandler {
			get {
				const string __id = "ddlHandler.Lcom/singular/sdk/SingularConfig$DDLHandler;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig.DDLHandler> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "ddlHandler.Lcom/singular/sdk/SingularConfig$DDLHandler;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='deviceAttributionHandler']"
		[Register ("deviceAttributionHandler")]
		public global::Com.Singular.Sdk.ISingularDeviceAttributionHandler DeviceAttributionHandler {
			get {
				const string __id = "deviceAttributionHandler.Lcom/singular/sdk/SingularDeviceAttributionHandler;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.ISingularDeviceAttributionHandler> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "deviceAttributionHandler.Lcom/singular/sdk/SingularDeviceAttributionHandler;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='enableLogging']"
		[Register ("enableLogging")]
		public bool EnableLogging {
			get {
				const string __id = "enableLogging.Z";

				var __v = _members.InstanceFields.GetBooleanValue (__id, this);
				return __v;
			}
			set {
				const string __id = "enableLogging.Z";

				try {
					_members.InstanceFields.SetValue (__id, this, value);
				} finally {
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='espDomains']"
		[Register ("espDomains")]
		public global::System.Collections.IList EspDomains {
			get {
				const string __id = "espDomains.Ljava/util/List;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Android.Runtime.JavaList.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "espDomains.Ljava/util/List;";

				IntPtr native_value = global::Android.Runtime.JavaList.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='facebookAppId']"
		[Register ("facebookAppId")]
		public string FacebookAppId {
			get {
				const string __id = "facebookAppId.Ljava/lang/String;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "facebookAppId.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string)value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='fcmDeviceToken']"
		[Register ("fcmDeviceToken")]
		public string FcmDeviceToken {
			get {
				const string __id = "fcmDeviceToken.Ljava/lang/String;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "fcmDeviceToken.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string)value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='globalProperties']"
		[Register ("globalProperties")]
		public global::System.Collections.IDictionary GlobalProperties {
			get {
				const string __id = "globalProperties.Ljava/util/Map;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Android.Runtime.JavaDictionary.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "globalProperties.Ljava/util/Map;";

				IntPtr native_value = global::Android.Runtime.JavaDictionary.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='imei']"
		[Register ("imei")]
		public string Imei {
			get {
				const string __id = "imei.Ljava/lang/String;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "imei.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string)value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='isOpenedWithDeepLink']"
		[Register ("isOpenedWithDeepLink")]
		public bool IsOpenedWithDeepLink {
			get {
				const string __id = "isOpenedWithDeepLink.Z";

				var __v = _members.InstanceFields.GetBooleanValue (__id, this);
				return __v;
			}
			set {
				const string __id = "isOpenedWithDeepLink.Z";

				try {
					_members.InstanceFields.SetValue (__id, this, value);
				} finally {
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='limitDataSharing']"
		[Register ("limitDataSharing")]
		public global::Java.Lang.Boolean LimitDataSharing {
			get {
				const string __id = "limitDataSharing.Ljava/lang/Boolean;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Boolean> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "limitDataSharing.Ljava/lang/Boolean;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='limitedIdentifiresEnabled']"
		[Register ("limitedIdentifiresEnabled")]
		public global::Java.Lang.Boolean LimitedIdentifiresEnabled {
			get {
				const string __id = "limitedIdentifiresEnabled.Ljava/lang/Boolean;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Boolean> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "limitedIdentifiresEnabled.Ljava/lang/Boolean;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='linkCallback']"
		[Register ("linkCallback")]
		public global::Com.Singular.Sdk.ISingularLinkHandler LinkCallback {
			get {
				const string __id = "linkCallback.Lcom/singular/sdk/SingularLinkHandler;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.ISingularLinkHandler> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "linkCallback.Lcom/singular/sdk/SingularLinkHandler;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='logLevel']"
		[Register ("logLevel")]
		public int LogLevel {
			get {
				const string __id = "logLevel.I";

				var __v = _members.InstanceFields.GetInt32Value (__id, this);
				return __v;
			}
			set {
				const string __id = "logLevel.I";

				try {
					_members.InstanceFields.SetValue (__id, this, value);
				} finally {
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='openUri']"
		[Register ("openUri")]
		public global::Android.Net.Uri OpenUri {
			get {
				const string __id = "openUri.Landroid/net/Uri;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Java.Lang.Object.GetObject<global::Android.Net.Uri> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "openUri.Landroid/net/Uri;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='sdidAccessorHandler']"
		[Register ("sdidAccessorHandler")]
		public global::Com.Singular.Sdk.ISDIDAccessorHandler SdidAccessorHandler {
			get {
				const string __id = "sdidAccessorHandler.Lcom/singular/sdk/SDIDAccessorHandler;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.ISDIDAccessorHandler> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "sdidAccessorHandler.Lcom/singular/sdk/SDIDAccessorHandler;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='secret']"
		[Register ("secret")]
		public string Secret {
			get {
				const string __id = "secret.Ljava/lang/String;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "secret.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string)value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='sessionTimeoutSec']"
		[Register ("sessionTimeoutSec")]
		public long SessionTimeoutSec {
			get {
				const string __id = "sessionTimeoutSec.J";

				var __v = _members.InstanceFields.GetInt64Value (__id, this);
				return __v;
			}
			set {
				const string __id = "sessionTimeoutSec.J";

				try {
					_members.InstanceFields.SetValue (__id, this, value);
				} finally {
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='shortlinkTimeoutSec']"
		[Register ("shortlinkTimeoutSec")]
		public long ShortlinkTimeoutSec {
			get {
				const string __id = "shortlinkTimeoutSec.J";

				var __v = _members.InstanceFields.GetInt64Value (__id, this);
				return __v;
			}
			set {
				const string __id = "shortlinkTimeoutSec.J";

				try {
					_members.InstanceFields.SetValue (__id, this, value);
				} finally {
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/field[@name='singularLink']"
		[Register ("singularLink")]
		public global::Android.Net.Uri SingularLink {
			get {
				const string __id = "singularLink.Landroid/net/Uri;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Java.Lang.Object.GetObject<global::Android.Net.Uri> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "singularLink.Landroid/net/Uri;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		// Metadata.xml XPath class reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig.DDLHandler']"
		[global::Android.Runtime.Register ("com/singular/sdk/SingularConfig$DDLHandler", DoNotGenerateAcw=true)]
		public partial class DDLHandler : global::Java.Lang.Object {

			// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig.DDLHandler']/field[@name='handler']"
			[Register ("handler")]
			public global::Com.Singular.Sdk.IDeferredDeepLinkHandler Handler {
				get {
					const string __id = "handler.Lcom/singular/sdk/DeferredDeepLinkHandler;";

					var __v = _members.InstanceFields.GetObjectValue (__id, this);
					return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.IDeferredDeepLinkHandler> (__v.Handle, JniHandleOwnership.TransferLocalRef);
				}
				set {
					const string __id = "handler.Lcom/singular/sdk/DeferredDeepLinkHandler;";

					IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
					try {
						_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
					} finally {
						global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
					}
				}
			}


			// Metadata.xml XPath field reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig.DDLHandler']/field[@name='timeoutInSec']"
			[Register ("timeoutInSec")]
			public long TimeoutInSec {
				get {
					const string __id = "timeoutInSec.J";

					var __v = _members.InstanceFields.GetInt64Value (__id, this);
					return __v;
				}
				set {
					const string __id = "timeoutInSec.J";

					try {
						_members.InstanceFields.SetValue (__id, this, value);
					} finally {
					}
				}
			}

			static readonly JniPeerMembers _members = new XAPeerMembers ("com/singular/sdk/SingularConfig$DDLHandler", typeof (DDLHandler));

			internal static IntPtr class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			protected DDLHandler (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
			{
			}

			// Metadata.xml XPath constructor reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig.DDLHandler']/constructor[@name='SingularConfig.DDLHandler' and count(parameter)=0]"
			[Register (".ctor", "()V", "")]
			public unsafe DDLHandler () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
			{
				const string __id = "()V";

				if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
					return;

				try {
					var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
					SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
					_members.InstanceMethods.FinishCreateInstance (__id, this, null);
				} finally {
				}
			}

		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/singular/sdk/SingularConfig", typeof (SingularConfig));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected SingularConfig (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/constructor[@name='SingularConfig' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register (".ctor", "(Ljava/lang/String;Ljava/lang/String;)V", "")]
		public unsafe SingularConfig (string apiKey, string secret) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Ljava/lang/String;Ljava/lang/String;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_apiKey = JNIEnv.NewString ((string)apiKey);
			IntPtr native_secret = JNIEnv.NewString ((string)secret);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_apiKey);
				__args [1] = new JniArgumentValue (native_secret);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_apiKey);
				JNIEnv.DeleteLocalRef (native_secret);
			}
		}

		static Delegate cb_withCustomSdid_Ljava_lang_String_Lcom_singular_sdk_SDIDAccessorHandler_;
#pragma warning disable 0169
		static Delegate GetWithCustomSdid_Ljava_lang_String_Lcom_singular_sdk_SDIDAccessorHandler_Handler ()
		{
			if (cb_withCustomSdid_Ljava_lang_String_Lcom_singular_sdk_SDIDAccessorHandler_ == null)
				cb_withCustomSdid_Ljava_lang_String_Lcom_singular_sdk_SDIDAccessorHandler_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLL_L (n_WithCustomSdid_Ljava_lang_String_Lcom_singular_sdk_SDIDAccessorHandler_));
			return cb_withCustomSdid_Ljava_lang_String_Lcom_singular_sdk_SDIDAccessorHandler_;
		}

		static IntPtr n_WithCustomSdid_Ljava_lang_String_Lcom_singular_sdk_SDIDAccessorHandler_ (IntPtr jnienv, IntPtr native__this, IntPtr native_customSdid, IntPtr native_accessorHandler)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var customSdid = JNIEnv.GetString (native_customSdid, JniHandleOwnership.DoNotTransfer);
			var accessorHandler = (global::Com.Singular.Sdk.ISDIDAccessorHandler)global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.ISDIDAccessorHandler> (native_accessorHandler, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.WithCustomSdid (customSdid, accessorHandler));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withCustomSdid' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='com.singular.sdk.SDIDAccessorHandler']]"
		[Register ("withCustomSdid", "(Ljava/lang/String;Lcom/singular/sdk/SDIDAccessorHandler;)Lcom/singular/sdk/SingularConfig;", "GetWithCustomSdid_Ljava_lang_String_Lcom_singular_sdk_SDIDAccessorHandler_Handler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithCustomSdid (string customSdid, global::Com.Singular.Sdk.ISDIDAccessorHandler accessorHandler)
		{
			const string __id = "withCustomSdid.(Ljava/lang/String;Lcom/singular/sdk/SDIDAccessorHandler;)Lcom/singular/sdk/SingularConfig;";
			IntPtr native_customSdid = JNIEnv.NewString ((string)customSdid);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_customSdid);
				__args [1] = new JniArgumentValue ((accessorHandler == null) ? IntPtr.Zero : ((global::Java.Lang.Object) accessorHandler).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_customSdid);
				global::System.GC.KeepAlive (accessorHandler);
			}
		}

		static Delegate cb_withCustomUserId_Ljava_lang_String_;
#pragma warning disable 0169
		static Delegate GetWithCustomUserId_Ljava_lang_String_Handler ()
		{
			if (cb_withCustomUserId_Ljava_lang_String_ == null)
				cb_withCustomUserId_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_WithCustomUserId_Ljava_lang_String_));
			return cb_withCustomUserId_Ljava_lang_String_;
		}

		static IntPtr n_WithCustomUserId_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_customUserId)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var customUserId = JNIEnv.GetString (native_customUserId, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.WithCustomUserId (customUserId));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withCustomUserId' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("withCustomUserId", "(Ljava/lang/String;)Lcom/singular/sdk/SingularConfig;", "GetWithCustomUserId_Ljava_lang_String_Handler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithCustomUserId (string customUserId)
		{
			const string __id = "withCustomUserId.(Ljava/lang/String;)Lcom/singular/sdk/SingularConfig;";
			IntPtr native_customUserId = JNIEnv.NewString ((string)customUserId);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_customUserId);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_customUserId);
			}
		}

		static Delegate cb_withDDLHandler_Lcom_singular_sdk_DeferredDeepLinkHandler_;
#pragma warning disable 0169
		static Delegate GetWithDDLHandler_Lcom_singular_sdk_DeferredDeepLinkHandler_Handler ()
		{
			if (cb_withDDLHandler_Lcom_singular_sdk_DeferredDeepLinkHandler_ == null)
				cb_withDDLHandler_Lcom_singular_sdk_DeferredDeepLinkHandler_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_WithDDLHandler_Lcom_singular_sdk_DeferredDeepLinkHandler_));
			return cb_withDDLHandler_Lcom_singular_sdk_DeferredDeepLinkHandler_;
		}

		static IntPtr n_WithDDLHandler_Lcom_singular_sdk_DeferredDeepLinkHandler_ (IntPtr jnienv, IntPtr native__this, IntPtr native_handler)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var handler = (global::Com.Singular.Sdk.IDeferredDeepLinkHandler)global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.IDeferredDeepLinkHandler> (native_handler, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.WithDDLHandler (handler));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withDDLHandler' and count(parameter)=1 and parameter[1][@type='com.singular.sdk.DeferredDeepLinkHandler']]"
		[Register ("withDDLHandler", "(Lcom/singular/sdk/DeferredDeepLinkHandler;)Lcom/singular/sdk/SingularConfig;", "GetWithDDLHandler_Lcom_singular_sdk_DeferredDeepLinkHandler_Handler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithDDLHandler (global::Com.Singular.Sdk.IDeferredDeepLinkHandler handler)
		{
			const string __id = "withDDLHandler.(Lcom/singular/sdk/DeferredDeepLinkHandler;)Lcom/singular/sdk/SingularConfig;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((handler == null) ? IntPtr.Zero : ((global::Java.Lang.Object) handler).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (handler);
			}
		}

		static Delegate cb_withDDLTimeoutInSec_J;
#pragma warning disable 0169
		static Delegate GetWithDDLTimeoutInSec_JHandler ()
		{
			if (cb_withDDLTimeoutInSec_J == null)
				cb_withDDLTimeoutInSec_J = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPJ_L (n_WithDDLTimeoutInSec_J));
			return cb_withDDLTimeoutInSec_J;
		}

		static IntPtr n_WithDDLTimeoutInSec_J (IntPtr jnienv, IntPtr native__this, long timeout)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return JNIEnv.ToLocalJniHandle (__this.WithDDLTimeoutInSec (timeout));
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withDDLTimeoutInSec' and count(parameter)=1 and parameter[1][@type='long']]"
		[Register ("withDDLTimeoutInSec", "(J)Lcom/singular/sdk/SingularConfig;", "GetWithDDLTimeoutInSec_JHandler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithDDLTimeoutInSec (long timeout)
		{
			const string __id = "withDDLTimeoutInSec.(J)Lcom/singular/sdk/SingularConfig;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (timeout);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		static Delegate cb_withESPDomains_Ljava_util_List_;
#pragma warning disable 0169
		static Delegate GetWithESPDomains_Ljava_util_List_Handler ()
		{
			if (cb_withESPDomains_Ljava_util_List_ == null)
				cb_withESPDomains_Ljava_util_List_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_WithESPDomains_Ljava_util_List_));
			return cb_withESPDomains_Ljava_util_List_;
		}

		static IntPtr n_WithESPDomains_Ljava_util_List_ (IntPtr jnienv, IntPtr native__this, IntPtr native_espDomains)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var espDomains = global::Android.Runtime.JavaList<string>.FromJniHandle (native_espDomains, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.WithESPDomains (espDomains));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withESPDomains' and count(parameter)=1 and parameter[1][@type='java.util.List&lt;java.lang.String&gt;']]"
		[Register ("withESPDomains", "(Ljava/util/List;)Lcom/singular/sdk/SingularConfig;", "GetWithESPDomains_Ljava_util_List_Handler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithESPDomains (global::System.Collections.Generic.IList<string> espDomains)
		{
			const string __id = "withESPDomains.(Ljava/util/List;)Lcom/singular/sdk/SingularConfig;";
			IntPtr native_espDomains = global::Android.Runtime.JavaList<string>.ToLocalJniHandle (espDomains);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_espDomains);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_espDomains);
				global::System.GC.KeepAlive (espDomains);
			}
		}

		static Delegate cb_withFCMDeviceToken_Ljava_lang_String_;
#pragma warning disable 0169
		static Delegate GetWithFCMDeviceToken_Ljava_lang_String_Handler ()
		{
			if (cb_withFCMDeviceToken_Ljava_lang_String_ == null)
				cb_withFCMDeviceToken_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_WithFCMDeviceToken_Ljava_lang_String_));
			return cb_withFCMDeviceToken_Ljava_lang_String_;
		}

		static IntPtr n_WithFCMDeviceToken_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_fcmDeviceToken)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var fcmDeviceToken = JNIEnv.GetString (native_fcmDeviceToken, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.WithFCMDeviceToken (fcmDeviceToken));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withFCMDeviceToken' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("withFCMDeviceToken", "(Ljava/lang/String;)Lcom/singular/sdk/SingularConfig;", "GetWithFCMDeviceToken_Ljava_lang_String_Handler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithFCMDeviceToken (string fcmDeviceToken)
		{
			const string __id = "withFCMDeviceToken.(Ljava/lang/String;)Lcom/singular/sdk/SingularConfig;";
			IntPtr native_fcmDeviceToken = JNIEnv.NewString ((string)fcmDeviceToken);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_fcmDeviceToken);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_fcmDeviceToken);
			}
		}

		static Delegate cb_withFacebookAppId_Ljava_lang_String_;
#pragma warning disable 0169
		static Delegate GetWithFacebookAppId_Ljava_lang_String_Handler ()
		{
			if (cb_withFacebookAppId_Ljava_lang_String_ == null)
				cb_withFacebookAppId_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_WithFacebookAppId_Ljava_lang_String_));
			return cb_withFacebookAppId_Ljava_lang_String_;
		}

		static IntPtr n_WithFacebookAppId_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_facebookAppId)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var facebookAppId = JNIEnv.GetString (native_facebookAppId, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.WithFacebookAppId (facebookAppId));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withFacebookAppId' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("withFacebookAppId", "(Ljava/lang/String;)Lcom/singular/sdk/SingularConfig;", "GetWithFacebookAppId_Ljava_lang_String_Handler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithFacebookAppId (string facebookAppId)
		{
			const string __id = "withFacebookAppId.(Ljava/lang/String;)Lcom/singular/sdk/SingularConfig;";
			IntPtr native_facebookAppId = JNIEnv.NewString ((string)facebookAppId);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_facebookAppId);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_facebookAppId);
			}
		}

		static Delegate cb_withGlobalProperty_Ljava_lang_String_Ljava_lang_String_Z;
#pragma warning disable 0169
		static Delegate GetWithGlobalProperty_Ljava_lang_String_Ljava_lang_String_ZHandler ()
		{
			if (cb_withGlobalProperty_Ljava_lang_String_Ljava_lang_String_Z == null)
				cb_withGlobalProperty_Ljava_lang_String_Ljava_lang_String_Z = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLLZ_L (n_WithGlobalProperty_Ljava_lang_String_Ljava_lang_String_Z));
			return cb_withGlobalProperty_Ljava_lang_String_Ljava_lang_String_Z;
		}

		static IntPtr n_WithGlobalProperty_Ljava_lang_String_Ljava_lang_String_Z (IntPtr jnienv, IntPtr native__this, IntPtr native_key, IntPtr native_value, bool overrideExisting)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var key = JNIEnv.GetString (native_key, JniHandleOwnership.DoNotTransfer);
			var value = JNIEnv.GetString (native_value, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.WithGlobalProperty (key, value, overrideExisting));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withGlobalProperty' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='boolean']]"
		[Register ("withGlobalProperty", "(Ljava/lang/String;Ljava/lang/String;Z)Lcom/singular/sdk/SingularConfig;", "GetWithGlobalProperty_Ljava_lang_String_Ljava_lang_String_ZHandler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithGlobalProperty (string key, string value, bool overrideExisting)
		{
			const string __id = "withGlobalProperty.(Ljava/lang/String;Ljava/lang/String;Z)Lcom/singular/sdk/SingularConfig;";
			IntPtr native_key = JNIEnv.NewString ((string)key);
			IntPtr native_value = JNIEnv.NewString ((string)value);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_key);
				__args [1] = new JniArgumentValue (native_value);
				__args [2] = new JniArgumentValue (overrideExisting);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_key);
				JNIEnv.DeleteLocalRef (native_value);
			}
		}

		static Delegate cb_withIMEI_Ljava_lang_String_;
#pragma warning disable 0169
		static Delegate GetWithIMEI_Ljava_lang_String_Handler ()
		{
			if (cb_withIMEI_Ljava_lang_String_ == null)
				cb_withIMEI_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_WithIMEI_Ljava_lang_String_));
			return cb_withIMEI_Ljava_lang_String_;
		}

		static IntPtr n_WithIMEI_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_imei)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var imei = JNIEnv.GetString (native_imei, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.WithIMEI (imei));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withIMEI' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("withIMEI", "(Ljava/lang/String;)Lcom/singular/sdk/SingularConfig;", "GetWithIMEI_Ljava_lang_String_Handler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithIMEI (string imei)
		{
			const string __id = "withIMEI.(Ljava/lang/String;)Lcom/singular/sdk/SingularConfig;";
			IntPtr native_imei = JNIEnv.NewString ((string)imei);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_imei);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_imei);
			}
		}

		static Delegate cb_withLimitDataSharing_Z;
#pragma warning disable 0169
		static Delegate GetWithLimitDataSharing_ZHandler ()
		{
			if (cb_withLimitDataSharing_Z == null)
				cb_withLimitDataSharing_Z = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPZ_L (n_WithLimitDataSharing_Z));
			return cb_withLimitDataSharing_Z;
		}

		static IntPtr n_WithLimitDataSharing_Z (IntPtr jnienv, IntPtr native__this, bool shouldLimitDataSharing)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return JNIEnv.ToLocalJniHandle (__this.WithLimitDataSharing (shouldLimitDataSharing));
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withLimitDataSharing' and count(parameter)=1 and parameter[1][@type='boolean']]"
		[Register ("withLimitDataSharing", "(Z)Lcom/singular/sdk/SingularConfig;", "GetWithLimitDataSharing_ZHandler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithLimitDataSharing (bool shouldLimitDataSharing)
		{
			const string __id = "withLimitDataSharing.(Z)Lcom/singular/sdk/SingularConfig;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (shouldLimitDataSharing);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		static Delegate cb_withLimitedIdentifiersEnabled;
#pragma warning disable 0169
		static Delegate GetWithLimitedIdentifiersEnabledHandler ()
		{
			if (cb_withLimitedIdentifiersEnabled == null)
				cb_withLimitedIdentifiersEnabled = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_WithLimitedIdentifiersEnabled));
			return cb_withLimitedIdentifiersEnabled;
		}

		static IntPtr n_WithLimitedIdentifiersEnabled (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return JNIEnv.ToLocalJniHandle (__this.WithLimitedIdentifiersEnabled ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withLimitedIdentifiersEnabled' and count(parameter)=0]"
		[Register ("withLimitedIdentifiersEnabled", "()Lcom/singular/sdk/SingularConfig;", "GetWithLimitedIdentifiersEnabledHandler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithLimitedIdentifiersEnabled ()
		{
			const string __id = "withLimitedIdentifiersEnabled.()Lcom/singular/sdk/SingularConfig;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		static Delegate cb_withLogLevel_I;
#pragma warning disable 0169
		static Delegate GetWithLogLevel_IHandler ()
		{
			if (cb_withLogLevel_I == null)
				cb_withLogLevel_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_L (n_WithLogLevel_I));
			return cb_withLogLevel_I;
		}

		static IntPtr n_WithLogLevel_I (IntPtr jnienv, IntPtr native__this, int level)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return JNIEnv.ToLocalJniHandle (__this.WithLogLevel (level));
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withLogLevel' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("withLogLevel", "(I)Lcom/singular/sdk/SingularConfig;", "GetWithLogLevel_IHandler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithLogLevel (int level)
		{
			const string __id = "withLogLevel.(I)Lcom/singular/sdk/SingularConfig;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((int)level);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		static Delegate cb_withLoggingEnabled;
#pragma warning disable 0169
		static Delegate GetWithLoggingEnabledHandler ()
		{
			if (cb_withLoggingEnabled == null)
				cb_withLoggingEnabled = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_WithLoggingEnabled));
			return cb_withLoggingEnabled;
		}

		static IntPtr n_WithLoggingEnabled (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return JNIEnv.ToLocalJniHandle (__this.WithLoggingEnabled ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withLoggingEnabled' and count(parameter)=0]"
		[Register ("withLoggingEnabled", "()Lcom/singular/sdk/SingularConfig;", "GetWithLoggingEnabledHandler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithLoggingEnabled ()
		{
			const string __id = "withLoggingEnabled.()Lcom/singular/sdk/SingularConfig;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		static Delegate cb_withOAIDCollection;
#pragma warning disable 0169
		static Delegate GetWithOAIDCollectionHandler ()
		{
			if (cb_withOAIDCollection == null)
				cb_withOAIDCollection = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_WithOAIDCollection));
			return cb_withOAIDCollection;
		}

		static IntPtr n_WithOAIDCollection (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return JNIEnv.ToLocalJniHandle (__this.WithOAIDCollection ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withOAIDCollection' and count(parameter)=0]"
		[Register ("withOAIDCollection", "()Lcom/singular/sdk/SingularConfig;", "GetWithOAIDCollectionHandler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithOAIDCollection ()
		{
			const string __id = "withOAIDCollection.()Lcom/singular/sdk/SingularConfig;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		static Delegate cb_withOpenURI_Landroid_net_Uri_;
#pragma warning disable 0169
		static Delegate GetWithOpenURI_Landroid_net_Uri_Handler ()
		{
			if (cb_withOpenURI_Landroid_net_Uri_ == null)
				cb_withOpenURI_Landroid_net_Uri_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_WithOpenURI_Landroid_net_Uri_));
			return cb_withOpenURI_Landroid_net_Uri_;
		}

		static IntPtr n_WithOpenURI_Landroid_net_Uri_ (IntPtr jnienv, IntPtr native__this, IntPtr native_openUri)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var openUri = global::Java.Lang.Object.GetObject<global::Android.Net.Uri> (native_openUri, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.WithOpenURI (openUri));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withOpenURI' and count(parameter)=1 and parameter[1][@type='android.net.Uri']]"
		[Register ("withOpenURI", "(Landroid/net/Uri;)Lcom/singular/sdk/SingularConfig;", "GetWithOpenURI_Landroid_net_Uri_Handler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithOpenURI (global::Android.Net.Uri openUri)
		{
			const string __id = "withOpenURI.(Landroid/net/Uri;)Lcom/singular/sdk/SingularConfig;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((openUri == null) ? IntPtr.Zero : ((global::Java.Lang.Object) openUri).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (openUri);
			}
		}

		static Delegate cb_withSessionTimeoutInSec_J;
#pragma warning disable 0169
		static Delegate GetWithSessionTimeoutInSec_JHandler ()
		{
			if (cb_withSessionTimeoutInSec_J == null)
				cb_withSessionTimeoutInSec_J = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPJ_L (n_WithSessionTimeoutInSec_J));
			return cb_withSessionTimeoutInSec_J;
		}

		static IntPtr n_WithSessionTimeoutInSec_J (IntPtr jnienv, IntPtr native__this, long timeout)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return JNIEnv.ToLocalJniHandle (__this.WithSessionTimeoutInSec (timeout));
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withSessionTimeoutInSec' and count(parameter)=1 and parameter[1][@type='long']]"
		[Register ("withSessionTimeoutInSec", "(J)Lcom/singular/sdk/SingularConfig;", "GetWithSessionTimeoutInSec_JHandler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithSessionTimeoutInSec (long timeout)
		{
			const string __id = "withSessionTimeoutInSec.(J)Lcom/singular/sdk/SingularConfig;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (timeout);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		static Delegate cb_withSingularDeviceAttribution_Lcom_singular_sdk_SingularDeviceAttributionHandler_;
#pragma warning disable 0169
		static Delegate GetWithSingularDeviceAttribution_Lcom_singular_sdk_SingularDeviceAttributionHandler_Handler ()
		{
			if (cb_withSingularDeviceAttribution_Lcom_singular_sdk_SingularDeviceAttributionHandler_ == null)
				cb_withSingularDeviceAttribution_Lcom_singular_sdk_SingularDeviceAttributionHandler_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_WithSingularDeviceAttribution_Lcom_singular_sdk_SingularDeviceAttributionHandler_));
			return cb_withSingularDeviceAttribution_Lcom_singular_sdk_SingularDeviceAttributionHandler_;
		}

		static IntPtr n_WithSingularDeviceAttribution_Lcom_singular_sdk_SingularDeviceAttributionHandler_ (IntPtr jnienv, IntPtr native__this, IntPtr native_handler)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var handler = (global::Com.Singular.Sdk.ISingularDeviceAttributionHandler)global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.ISingularDeviceAttributionHandler> (native_handler, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.WithSingularDeviceAttribution (handler));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withSingularDeviceAttribution' and count(parameter)=1 and parameter[1][@type='com.singular.sdk.SingularDeviceAttributionHandler']]"
		[Register ("withSingularDeviceAttribution", "(Lcom/singular/sdk/SingularDeviceAttributionHandler;)Lcom/singular/sdk/SingularConfig;", "GetWithSingularDeviceAttribution_Lcom_singular_sdk_SingularDeviceAttributionHandler_Handler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithSingularDeviceAttribution (global::Com.Singular.Sdk.ISingularDeviceAttributionHandler handler)
		{
			const string __id = "withSingularDeviceAttribution.(Lcom/singular/sdk/SingularDeviceAttributionHandler;)Lcom/singular/sdk/SingularConfig;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((handler == null) ? IntPtr.Zero : ((global::Java.Lang.Object) handler).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (handler);
			}
		}

		static Delegate cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_;
#pragma warning disable 0169
		static Delegate GetWithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_Handler ()
		{
			if (cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_ == null)
				cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLL_L (n_WithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_));
			return cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_;
		}

		static IntPtr n_WithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_ (IntPtr jnienv, IntPtr native__this, IntPtr native_intent, IntPtr native_handler)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var intent = global::Java.Lang.Object.GetObject<global::Android.Content.Intent> (native_intent, JniHandleOwnership.DoNotTransfer);
			var handler = (global::Com.Singular.Sdk.ISingularLinkHandler)global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.ISingularLinkHandler> (native_handler, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.WithSingularLink (intent, handler));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withSingularLink' and count(parameter)=2 and parameter[1][@type='android.content.Intent'] and parameter[2][@type='com.singular.sdk.SingularLinkHandler']]"
		[Register ("withSingularLink", "(Landroid/content/Intent;Lcom/singular/sdk/SingularLinkHandler;)Lcom/singular/sdk/SingularConfig;", "GetWithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_Handler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithSingularLink (global::Android.Content.Intent intent, global::Com.Singular.Sdk.ISingularLinkHandler handler)
		{
			const string __id = "withSingularLink.(Landroid/content/Intent;Lcom/singular/sdk/SingularLinkHandler;)Lcom/singular/sdk/SingularConfig;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((intent == null) ? IntPtr.Zero : ((global::Java.Lang.Object) intent).Handle);
				__args [1] = new JniArgumentValue ((handler == null) ? IntPtr.Zero : ((global::Java.Lang.Object) handler).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (intent);
				global::System.GC.KeepAlive (handler);
			}
		}

		static Delegate cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_Ljava_util_List_;
#pragma warning disable 0169
		[global::System.Obsolete]
		static Delegate GetWithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_Ljava_util_List_Handler ()
		{
			if (cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_Ljava_util_List_ == null)
				cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_Ljava_util_List_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLLL_L (n_WithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_Ljava_util_List_));
			return cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_Ljava_util_List_;
		}

		[global::System.Obsolete]
		static IntPtr n_WithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_Ljava_util_List_ (IntPtr jnienv, IntPtr native__this, IntPtr native_intent, IntPtr native_handler, IntPtr native_supportedDomains)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var intent = global::Java.Lang.Object.GetObject<global::Android.Content.Intent> (native_intent, JniHandleOwnership.DoNotTransfer);
			var handler = (global::Com.Singular.Sdk.ISingularLinkHandler)global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.ISingularLinkHandler> (native_handler, JniHandleOwnership.DoNotTransfer);
			var supportedDomains = global::Android.Runtime.JavaList<string>.FromJniHandle (native_supportedDomains, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.WithSingularLink (intent, handler, supportedDomains));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withSingularLink' and count(parameter)=3 and parameter[1][@type='android.content.Intent'] and parameter[2][@type='com.singular.sdk.SingularLinkHandler'] and parameter[3][@type='java.util.List&lt;java.lang.String&gt;']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("withSingularLink", "(Landroid/content/Intent;Lcom/singular/sdk/SingularLinkHandler;Ljava/util/List;)Lcom/singular/sdk/SingularConfig;", "GetWithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_Ljava_util_List_Handler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithSingularLink (global::Android.Content.Intent intent, global::Com.Singular.Sdk.ISingularLinkHandler handler, global::System.Collections.Generic.IList<string> supportedDomains)
		{
			const string __id = "withSingularLink.(Landroid/content/Intent;Lcom/singular/sdk/SingularLinkHandler;Ljava/util/List;)Lcom/singular/sdk/SingularConfig;";
			IntPtr native_supportedDomains = global::Android.Runtime.JavaList<string>.ToLocalJniHandle (supportedDomains);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((intent == null) ? IntPtr.Zero : ((global::Java.Lang.Object) intent).Handle);
				__args [1] = new JniArgumentValue ((handler == null) ? IntPtr.Zero : ((global::Java.Lang.Object) handler).Handle);
				__args [2] = new JniArgumentValue (native_supportedDomains);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_supportedDomains);
				global::System.GC.KeepAlive (intent);
				global::System.GC.KeepAlive (handler);
				global::System.GC.KeepAlive (supportedDomains);
			}
		}

		static Delegate cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_J;
#pragma warning disable 0169
		static Delegate GetWithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_JHandler ()
		{
			if (cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_J == null)
				cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_J = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLLJ_L (n_WithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_J));
			return cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_J;
		}

		static IntPtr n_WithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_J (IntPtr jnienv, IntPtr native__this, IntPtr native_intent, IntPtr native_handler, long shortlinkTimeoutSec)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var intent = global::Java.Lang.Object.GetObject<global::Android.Content.Intent> (native_intent, JniHandleOwnership.DoNotTransfer);
			var handler = (global::Com.Singular.Sdk.ISingularLinkHandler)global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.ISingularLinkHandler> (native_handler, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.WithSingularLink (intent, handler, shortlinkTimeoutSec));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withSingularLink' and count(parameter)=3 and parameter[1][@type='android.content.Intent'] and parameter[2][@type='com.singular.sdk.SingularLinkHandler'] and parameter[3][@type='long']]"
		[Register ("withSingularLink", "(Landroid/content/Intent;Lcom/singular/sdk/SingularLinkHandler;J)Lcom/singular/sdk/SingularConfig;", "GetWithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_JHandler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithSingularLink (global::Android.Content.Intent intent, global::Com.Singular.Sdk.ISingularLinkHandler handler, long shortlinkTimeoutSec)
		{
			const string __id = "withSingularLink.(Landroid/content/Intent;Lcom/singular/sdk/SingularLinkHandler;J)Lcom/singular/sdk/SingularConfig;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((intent == null) ? IntPtr.Zero : ((global::Java.Lang.Object) intent).Handle);
				__args [1] = new JniArgumentValue ((handler == null) ? IntPtr.Zero : ((global::Java.Lang.Object) handler).Handle);
				__args [2] = new JniArgumentValue (shortlinkTimeoutSec);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (intent);
				global::System.GC.KeepAlive (handler);
			}
		}

		static Delegate cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_JLjava_util_List_;
#pragma warning disable 0169
		[global::System.Obsolete]
		static Delegate GetWithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_JLjava_util_List_Handler ()
		{
			if (cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_JLjava_util_List_ == null)
				cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_JLjava_util_List_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLLJL_L (n_WithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_JLjava_util_List_));
			return cb_withSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_JLjava_util_List_;
		}

		[global::System.Obsolete]
		static IntPtr n_WithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_JLjava_util_List_ (IntPtr jnienv, IntPtr native__this, IntPtr native_intent, IntPtr native_handler, long shortlinkTimeoutSec, IntPtr native_supportedDomains)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var intent = global::Java.Lang.Object.GetObject<global::Android.Content.Intent> (native_intent, JniHandleOwnership.DoNotTransfer);
			var handler = (global::Com.Singular.Sdk.ISingularLinkHandler)global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.ISingularLinkHandler> (native_handler, JniHandleOwnership.DoNotTransfer);
			var supportedDomains = global::Android.Runtime.JavaList<string>.FromJniHandle (native_supportedDomains, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.WithSingularLink (intent, handler, shortlinkTimeoutSec, supportedDomains));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='SingularConfig']/method[@name='withSingularLink' and count(parameter)=4 and parameter[1][@type='android.content.Intent'] and parameter[2][@type='com.singular.sdk.SingularLinkHandler'] and parameter[3][@type='long'] and parameter[4][@type='java.util.List&lt;java.lang.String&gt;']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("withSingularLink", "(Landroid/content/Intent;Lcom/singular/sdk/SingularLinkHandler;JLjava/util/List;)Lcom/singular/sdk/SingularConfig;", "GetWithSingularLink_Landroid_content_Intent_Lcom_singular_sdk_SingularLinkHandler_JLjava_util_List_Handler")]
		public virtual unsafe global::Com.Singular.Sdk.SingularConfig WithSingularLink (global::Android.Content.Intent intent, global::Com.Singular.Sdk.ISingularLinkHandler handler, long shortlinkTimeoutSec, global::System.Collections.Generic.IList<string> supportedDomains)
		{
			const string __id = "withSingularLink.(Landroid/content/Intent;Lcom/singular/sdk/SingularLinkHandler;JLjava/util/List;)Lcom/singular/sdk/SingularConfig;";
			IntPtr native_supportedDomains = global::Android.Runtime.JavaList<string>.ToLocalJniHandle (supportedDomains);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue ((intent == null) ? IntPtr.Zero : ((global::Java.Lang.Object) intent).Handle);
				__args [1] = new JniArgumentValue ((handler == null) ? IntPtr.Zero : ((global::Java.Lang.Object) handler).Handle);
				__args [2] = new JniArgumentValue (shortlinkTimeoutSec);
				__args [3] = new JniArgumentValue (native_supportedDomains);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Singular.Sdk.SingularConfig> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_supportedDomains);
				global::System.GC.KeepAlive (intent);
				global::System.GC.KeepAlive (handler);
				global::System.GC.KeepAlive (supportedDomains);
			}
		}

	}
}
