//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Singular.Sdk {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']"
	[global::Android.Runtime.Register ("com/singular/sdk/Singular", DoNotGenerateAcw=true)]
	public partial class Singular : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/singular/sdk/Singular", typeof (Singular));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Singular (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		public static unsafe global::System.Collections.Generic.IDictionary<string, string> GlobalProperties {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='getGlobalProperties' and count(parameter)=0]"
			[Register ("getGlobalProperties", "()Ljava/util/Map;", "")]
			get {
				const string __id = "getGlobalProperties.()Ljava/util/Map;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return global::Android.Runtime.JavaDictionary<string, string>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public static unsafe bool IsAllTrackingStopped {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='isAllTrackingStopped' and count(parameter)=0]"
			[Register ("isAllTrackingStopped", "()Z", "")]
			get {
				const string __id = "isAllTrackingStopped.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool LimitDataSharing {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='getLimitDataSharing' and count(parameter)=0]"
			[Register ("getLimitDataSharing", "()Z", "")]
			get {
				const string __id = "getLimitDataSharing.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe long SessionId {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='getSessionId' and count(parameter)=0]"
			[Register ("getSessionId", "()J", "")]
			get {
				const string __id = "getSessionId.()J";
				try {
					var __rm = _members.StaticMethods.InvokeInt64Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='adRevenue' and count(parameter)=1 and parameter[1][@type='com.singular.sdk.SingularAdData']]"
		[Register ("adRevenue", "(Lcom/singular/sdk/SingularAdData;)V", "")]
		public static unsafe void AdRevenue (global::Com.Singular.Sdk.SingularAdData adData)
		{
			const string __id = "adRevenue.(Lcom/singular/sdk/SingularAdData;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((adData == null) ? IntPtr.Zero : ((global::Java.Lang.Object) adData).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (adData);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='clearGlobalProperties' and count(parameter)=0]"
		[Register ("clearGlobalProperties", "()V", "")]
		public static unsafe void ClearGlobalProperties ()
		{
			const string __id = "clearGlobalProperties.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='createReferrerShortLink' and count(parameter)=5 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='org.json.JSONObject'] and parameter[5][@type='com.singular.sdk.ShortLinkHandler']]"
		[Register ("createReferrerShortLink", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/json/JSONObject;Lcom/singular/sdk/ShortLinkHandler;)V", "")]
		public static unsafe void CreateReferrerShortLink (string baseLink, string referrerName, string referrerId, global::Org.Json.JSONObject passthroughParams, global::Com.Singular.Sdk.IShortLinkHandler shortLinkHandler)
		{
			const string __id = "createReferrerShortLink.(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/json/JSONObject;Lcom/singular/sdk/ShortLinkHandler;)V";
			IntPtr native_baseLink = JNIEnv.NewString ((string)baseLink);
			IntPtr native_referrerName = JNIEnv.NewString ((string)referrerName);
			IntPtr native_referrerId = JNIEnv.NewString ((string)referrerId);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_baseLink);
				__args [1] = new JniArgumentValue (native_referrerName);
				__args [2] = new JniArgumentValue (native_referrerId);
				__args [3] = new JniArgumentValue ((passthroughParams == null) ? IntPtr.Zero : ((global::Java.Lang.Object) passthroughParams).Handle);
				__args [4] = new JniArgumentValue ((shortLinkHandler == null) ? IntPtr.Zero : ((global::Java.Lang.Object) shortLinkHandler).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_baseLink);
				JNIEnv.DeleteLocalRef (native_referrerName);
				JNIEnv.DeleteLocalRef (native_referrerId);
				global::System.GC.KeepAlive (passthroughParams);
				global::System.GC.KeepAlive (shortLinkHandler);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='customRevenue' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='double']]"
		[Register ("customRevenue", "(Ljava/lang/String;Ljava/lang/String;D)Z", "")]
		public static unsafe bool CustomRevenue (string eventName, string currency, double amount)
		{
			const string __id = "customRevenue.(Ljava/lang/String;Ljava/lang/String;D)Z";
			IntPtr native_eventName = JNIEnv.NewString ((string)eventName);
			IntPtr native_currency = JNIEnv.NewString ((string)currency);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_eventName);
				__args [1] = new JniArgumentValue (native_currency);
				__args [2] = new JniArgumentValue (amount);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_eventName);
				JNIEnv.DeleteLocalRef (native_currency);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='customRevenue' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='double'] and parameter[4][@type='java.lang.Object']]"
		[Register ("customRevenue", "(Ljava/lang/String;Ljava/lang/String;DLjava/lang/Object;)Z", "")]
		public static unsafe bool CustomRevenue (string eventName, string currency, double amount, global::Java.Lang.Object purchase)
		{
			const string __id = "customRevenue.(Ljava/lang/String;Ljava/lang/String;DLjava/lang/Object;)Z";
			IntPtr native_eventName = JNIEnv.NewString ((string)eventName);
			IntPtr native_currency = JNIEnv.NewString ((string)currency);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_eventName);
				__args [1] = new JniArgumentValue (native_currency);
				__args [2] = new JniArgumentValue (amount);
				__args [3] = new JniArgumentValue ((purchase == null) ? IntPtr.Zero : ((global::Java.Lang.Object) purchase).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_eventName);
				JNIEnv.DeleteLocalRef (native_currency);
				global::System.GC.KeepAlive (purchase);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='customRevenue' and count(parameter)=5 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='double'] and parameter[4][@type='java.lang.Object'] and parameter[5][@type='java.util.Map&lt;java.lang.String, java.lang.Object&gt;']]"
		[Register ("customRevenue", "(Ljava/lang/String;Ljava/lang/String;DLjava/lang/Object;Ljava/util/Map;)Z", "")]
		public static unsafe bool CustomRevenue (string eventName, string currency, double amount, global::Java.Lang.Object purchase, global::System.Collections.Generic.IDictionary<string, global::Java.Lang.Object> attributes)
		{
			const string __id = "customRevenue.(Ljava/lang/String;Ljava/lang/String;DLjava/lang/Object;Ljava/util/Map;)Z";
			IntPtr native_eventName = JNIEnv.NewString ((string)eventName);
			IntPtr native_currency = JNIEnv.NewString ((string)currency);
			IntPtr native_attributes = global::Android.Runtime.JavaDictionary<string, global::Java.Lang.Object>.ToLocalJniHandle (attributes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_eventName);
				__args [1] = new JniArgumentValue (native_currency);
				__args [2] = new JniArgumentValue (amount);
				__args [3] = new JniArgumentValue ((purchase == null) ? IntPtr.Zero : ((global::Java.Lang.Object) purchase).Handle);
				__args [4] = new JniArgumentValue (native_attributes);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_eventName);
				JNIEnv.DeleteLocalRef (native_currency);
				JNIEnv.DeleteLocalRef (native_attributes);
				global::System.GC.KeepAlive (purchase);
				global::System.GC.KeepAlive (attributes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='customRevenue' and count(parameter)=5 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='double'] and parameter[4][@type='java.lang.String'] and parameter[5][@type='java.lang.String']]"
		[Register ("customRevenue", "(Ljava/lang/String;Ljava/lang/String;DLjava/lang/String;Ljava/lang/String;)Z", "")]
		public static unsafe bool CustomRevenue (string eventName, string currency, double amount, string receipt, string receiptSignature)
		{
			const string __id = "customRevenue.(Ljava/lang/String;Ljava/lang/String;DLjava/lang/String;Ljava/lang/String;)Z";
			IntPtr native_eventName = JNIEnv.NewString ((string)eventName);
			IntPtr native_currency = JNIEnv.NewString ((string)currency);
			IntPtr native_receipt = JNIEnv.NewString ((string)receipt);
			IntPtr native_receiptSignature = JNIEnv.NewString ((string)receiptSignature);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_eventName);
				__args [1] = new JniArgumentValue (native_currency);
				__args [2] = new JniArgumentValue (amount);
				__args [3] = new JniArgumentValue (native_receipt);
				__args [4] = new JniArgumentValue (native_receiptSignature);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_eventName);
				JNIEnv.DeleteLocalRef (native_currency);
				JNIEnv.DeleteLocalRef (native_receipt);
				JNIEnv.DeleteLocalRef (native_receiptSignature);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='customRevenue' and count(parameter)=8 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='double'] and parameter[4][@type='java.lang.String'] and parameter[5][@type='java.lang.String'] and parameter[6][@type='java.lang.String'] and parameter[7][@type='int'] and parameter[8][@type='double']]"
		[Register ("customRevenue", "(Ljava/lang/String;Ljava/lang/String;DLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ID)Z", "")]
		public static unsafe bool CustomRevenue (string eventName, string currency, double amount, string productSKU, string productName, string productCategory, int productQuantity, double productPrice)
		{
			const string __id = "customRevenue.(Ljava/lang/String;Ljava/lang/String;DLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ID)Z";
			IntPtr native_eventName = JNIEnv.NewString ((string)eventName);
			IntPtr native_currency = JNIEnv.NewString ((string)currency);
			IntPtr native_productSKU = JNIEnv.NewString ((string)productSKU);
			IntPtr native_productName = JNIEnv.NewString ((string)productName);
			IntPtr native_productCategory = JNIEnv.NewString ((string)productCategory);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [8];
				__args [0] = new JniArgumentValue (native_eventName);
				__args [1] = new JniArgumentValue (native_currency);
				__args [2] = new JniArgumentValue (amount);
				__args [3] = new JniArgumentValue (native_productSKU);
				__args [4] = new JniArgumentValue (native_productName);
				__args [5] = new JniArgumentValue (native_productCategory);
				__args [6] = new JniArgumentValue (productQuantity);
				__args [7] = new JniArgumentValue (productPrice);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_eventName);
				JNIEnv.DeleteLocalRef (native_currency);
				JNIEnv.DeleteLocalRef (native_productSKU);
				JNIEnv.DeleteLocalRef (native_productName);
				JNIEnv.DeleteLocalRef (native_productCategory);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='customRevenue' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='double'] and parameter[4][@type='java.util.Map&lt;java.lang.String, java.lang.Object&gt;']]"
		[Register ("customRevenue", "(Ljava/lang/String;Ljava/lang/String;DLjava/util/Map;)Z", "")]
		public static unsafe bool CustomRevenue (string eventName, string currency, double amount, global::System.Collections.Generic.IDictionary<string, global::Java.Lang.Object> attributes)
		{
			const string __id = "customRevenue.(Ljava/lang/String;Ljava/lang/String;DLjava/util/Map;)Z";
			IntPtr native_eventName = JNIEnv.NewString ((string)eventName);
			IntPtr native_currency = JNIEnv.NewString ((string)currency);
			IntPtr native_attributes = global::Android.Runtime.JavaDictionary<string, global::Java.Lang.Object>.ToLocalJniHandle (attributes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_eventName);
				__args [1] = new JniArgumentValue (native_currency);
				__args [2] = new JniArgumentValue (amount);
				__args [3] = new JniArgumentValue (native_attributes);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_eventName);
				JNIEnv.DeleteLocalRef (native_currency);
				JNIEnv.DeleteLocalRef (native_attributes);
				global::System.GC.KeepAlive (attributes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='customRevenue' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='org.json.JSONObject']]"
		[Register ("customRevenue", "(Ljava/lang/String;Lorg/json/JSONObject;)Z", "")]
		public static unsafe bool CustomRevenue (string eventName, global::Org.Json.JSONObject json)
		{
			const string __id = "customRevenue.(Ljava/lang/String;Lorg/json/JSONObject;)Z";
			IntPtr native_eventName = JNIEnv.NewString ((string)eventName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_eventName);
				__args [1] = new JniArgumentValue ((json == null) ? IntPtr.Zero : ((global::Java.Lang.Object) json).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_eventName);
				global::System.GC.KeepAlive (json);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='event' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("event", "(Ljava/lang/String;)Z", "")]
		public static unsafe bool Event (string name)
		{
			const string __id = "event.(Ljava/lang/String;)Z";
			IntPtr native_name = JNIEnv.NewString ((string)name);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_name);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_name);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='event' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.Object...']]"
		[Register ("event", "(Ljava/lang/String;[Ljava/lang/Object;)Z", "")]
		public static unsafe bool Event (string name, params global::Java.Lang.Object[] args)
		{
			const string __id = "event.(Ljava/lang/String;[Ljava/lang/Object;)Z";
			IntPtr native_name = JNIEnv.NewString ((string)name);
			IntPtr native_args = JNIEnv.NewArray (args);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_name);
				__args [1] = new JniArgumentValue (native_args);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_name);
				if (args != null) {
					JNIEnv.CopyArray (native_args, args);
					JNIEnv.DeleteLocalRef (native_args);
				}
				global::System.GC.KeepAlive (args);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='event' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("event", "(Ljava/lang/String;Ljava/lang/String;)Z", "")]
		public static unsafe bool Event (string name, string extra)
		{
			const string __id = "event.(Ljava/lang/String;Ljava/lang/String;)Z";
			IntPtr native_name = JNIEnv.NewString ((string)name);
			IntPtr native_extra = JNIEnv.NewString ((string)extra);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_name);
				__args [1] = new JniArgumentValue (native_extra);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_name);
				JNIEnv.DeleteLocalRef (native_extra);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='eventJSON' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='org.json.JSONObject']]"
		[Register ("eventJSON", "(Ljava/lang/String;Lorg/json/JSONObject;)Z", "")]
		public static unsafe bool EventJSON (string name, global::Org.Json.JSONObject json)
		{
			const string __id = "eventJSON.(Ljava/lang/String;Lorg/json/JSONObject;)Z";
			IntPtr native_name = JNIEnv.NewString ((string)name);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_name);
				__args [1] = new JniArgumentValue ((json == null) ? IntPtr.Zero : ((global::Java.Lang.Object) json).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_name);
				global::System.GC.KeepAlive (json);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='init' and count(parameter)=2 and parameter[1][@type='android.content.Context'] and parameter[2][@type='com.singular.sdk.SingularConfig']]"
		[Register ("init", "(Landroid/content/Context;Lcom/singular/sdk/SingularConfig;)Z", "")]
		public static unsafe bool Init (global::Android.Content.Context context, global::Com.Singular.Sdk.SingularConfig config)
		{
			const string __id = "init.(Landroid/content/Context;Lcom/singular/sdk/SingularConfig;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				__args [1] = new JniArgumentValue ((config == null) ? IntPtr.Zero : ((global::Java.Lang.Object) config).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (context);
				global::System.GC.KeepAlive (config);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='init' and count(parameter)=3 and parameter[1][@type='android.content.Context'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String']]"
		[Register ("init", "(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z", "")]
		public static unsafe bool Init (global::Android.Content.Context context, string apiKey, string secret)
		{
			const string __id = "init.(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z";
			IntPtr native_apiKey = JNIEnv.NewString ((string)apiKey);
			IntPtr native_secret = JNIEnv.NewString ((string)secret);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				__args [1] = new JniArgumentValue (native_apiKey);
				__args [2] = new JniArgumentValue (native_secret);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_apiKey);
				JNIEnv.DeleteLocalRef (native_secret);
				global::System.GC.KeepAlive (context);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='limitDataSharing' and count(parameter)=1 and parameter[1][@type='boolean']]"
		[Register ("limitDataSharing", "(Z)V", "")]
		public static unsafe void InvokeLimitDataSharing (bool shouldLimitDataSharing)
		{
			const string __id = "limitDataSharing.(Z)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (shouldLimitDataSharing);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='onActivityPaused' and count(parameter)=0]"
		[Register ("onActivityPaused", "()V", "")]
		public static unsafe void OnActivityPaused ()
		{
			const string __id = "onActivityPaused.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='onActivityResumed' and count(parameter)=0]"
		[Register ("onActivityResumed", "()V", "")]
		public static unsafe void OnActivityResumed ()
		{
			const string __id = "onActivityResumed.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='resumeAllTracking' and count(parameter)=0]"
		[Register ("resumeAllTracking", "()V", "")]
		public static unsafe void ResumeAllTracking ()
		{
			const string __id = "resumeAllTracking.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='revenue' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='double']]"
		[Register ("revenue", "(Ljava/lang/String;D)Z", "")]
		public static unsafe bool Revenue (string currency, double amount)
		{
			const string __id = "revenue.(Ljava/lang/String;D)Z";
			IntPtr native_currency = JNIEnv.NewString ((string)currency);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_currency);
				__args [1] = new JniArgumentValue (amount);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_currency);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='revenue' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='double'] and parameter[3][@type='java.lang.Object']]"
		[Register ("revenue", "(Ljava/lang/String;DLjava/lang/Object;)Z", "")]
		public static unsafe bool Revenue (string currency, double amount, global::Java.Lang.Object purchase)
		{
			const string __id = "revenue.(Ljava/lang/String;DLjava/lang/Object;)Z";
			IntPtr native_currency = JNIEnv.NewString ((string)currency);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_currency);
				__args [1] = new JniArgumentValue (amount);
				__args [2] = new JniArgumentValue ((purchase == null) ? IntPtr.Zero : ((global::Java.Lang.Object) purchase).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_currency);
				global::System.GC.KeepAlive (purchase);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='revenue' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='double'] and parameter[3][@type='java.lang.Object'] and parameter[4][@type='java.util.Map&lt;java.lang.String, java.lang.Object&gt;']]"
		[Register ("revenue", "(Ljava/lang/String;DLjava/lang/Object;Ljava/util/Map;)Z", "")]
		public static unsafe bool Revenue (string currency, double amount, global::Java.Lang.Object purchase, global::System.Collections.Generic.IDictionary<string, global::Java.Lang.Object> attributes)
		{
			const string __id = "revenue.(Ljava/lang/String;DLjava/lang/Object;Ljava/util/Map;)Z";
			IntPtr native_currency = JNIEnv.NewString ((string)currency);
			IntPtr native_attributes = global::Android.Runtime.JavaDictionary<string, global::Java.Lang.Object>.ToLocalJniHandle (attributes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_currency);
				__args [1] = new JniArgumentValue (amount);
				__args [2] = new JniArgumentValue ((purchase == null) ? IntPtr.Zero : ((global::Java.Lang.Object) purchase).Handle);
				__args [3] = new JniArgumentValue (native_attributes);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_currency);
				JNIEnv.DeleteLocalRef (native_attributes);
				global::System.GC.KeepAlive (purchase);
				global::System.GC.KeepAlive (attributes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='revenue' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='double'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='java.lang.String']]"
		[Register ("revenue", "(Ljava/lang/String;DLjava/lang/String;Ljava/lang/String;)Z", "")]
		public static unsafe bool Revenue (string currency, double amount, string receipt, string receiptSignature)
		{
			const string __id = "revenue.(Ljava/lang/String;DLjava/lang/String;Ljava/lang/String;)Z";
			IntPtr native_currency = JNIEnv.NewString ((string)currency);
			IntPtr native_receipt = JNIEnv.NewString ((string)receipt);
			IntPtr native_receiptSignature = JNIEnv.NewString ((string)receiptSignature);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_currency);
				__args [1] = new JniArgumentValue (amount);
				__args [2] = new JniArgumentValue (native_receipt);
				__args [3] = new JniArgumentValue (native_receiptSignature);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_currency);
				JNIEnv.DeleteLocalRef (native_receipt);
				JNIEnv.DeleteLocalRef (native_receiptSignature);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='revenue' and count(parameter)=7 and parameter[1][@type='java.lang.String'] and parameter[2][@type='double'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='java.lang.String'] and parameter[5][@type='java.lang.String'] and parameter[6][@type='int'] and parameter[7][@type='double']]"
		[Register ("revenue", "(Ljava/lang/String;DLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ID)Z", "")]
		public static unsafe bool Revenue (string currency, double amount, string productSKU, string productName, string productCategory, int productQuantity, double productPrice)
		{
			const string __id = "revenue.(Ljava/lang/String;DLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ID)Z";
			IntPtr native_currency = JNIEnv.NewString ((string)currency);
			IntPtr native_productSKU = JNIEnv.NewString ((string)productSKU);
			IntPtr native_productName = JNIEnv.NewString ((string)productName);
			IntPtr native_productCategory = JNIEnv.NewString ((string)productCategory);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (native_currency);
				__args [1] = new JniArgumentValue (amount);
				__args [2] = new JniArgumentValue (native_productSKU);
				__args [3] = new JniArgumentValue (native_productName);
				__args [4] = new JniArgumentValue (native_productCategory);
				__args [5] = new JniArgumentValue (productQuantity);
				__args [6] = new JniArgumentValue (productPrice);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_currency);
				JNIEnv.DeleteLocalRef (native_productSKU);
				JNIEnv.DeleteLocalRef (native_productName);
				JNIEnv.DeleteLocalRef (native_productCategory);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='revenue' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='double'] and parameter[3][@type='java.util.Map&lt;java.lang.String, java.lang.Object&gt;']]"
		[Register ("revenue", "(Ljava/lang/String;DLjava/util/Map;)Z", "")]
		public static unsafe bool Revenue (string currency, double amount, global::System.Collections.Generic.IDictionary<string, global::Java.Lang.Object> attributes)
		{
			const string __id = "revenue.(Ljava/lang/String;DLjava/util/Map;)Z";
			IntPtr native_currency = JNIEnv.NewString ((string)currency);
			IntPtr native_attributes = global::Android.Runtime.JavaDictionary<string, global::Java.Lang.Object>.ToLocalJniHandle (attributes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_currency);
				__args [1] = new JniArgumentValue (amount);
				__args [2] = new JniArgumentValue (native_attributes);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_currency);
				JNIEnv.DeleteLocalRef (native_attributes);
				global::System.GC.KeepAlive (attributes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='revenue' and count(parameter)=1 and parameter[1][@type='org.json.JSONObject']]"
		[Register ("revenue", "(Lorg/json/JSONObject;)Z", "")]
		public static unsafe bool Revenue (global::Org.Json.JSONObject json)
		{
			const string __id = "revenue.(Lorg/json/JSONObject;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((json == null) ? IntPtr.Zero : ((global::Java.Lang.Object) json).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (json);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='setCustomUserId' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setCustomUserId", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetCustomUserId (string customUserId)
		{
			const string __id = "setCustomUserId.(Ljava/lang/String;)V";
			IntPtr native_customUserId = JNIEnv.NewString ((string)customUserId);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_customUserId);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_customUserId);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='setDeviceCustomUserId' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setDeviceCustomUserId", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetDeviceCustomUserId (string customUserId)
		{
			const string __id = "setDeviceCustomUserId.(Ljava/lang/String;)V";
			IntPtr native_customUserId = JNIEnv.NewString ((string)customUserId);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_customUserId);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_customUserId);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='setFCMDeviceToken' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setFCMDeviceToken", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetFCMDeviceToken (string fcmDeviceToken)
		{
			const string __id = "setFCMDeviceToken.(Ljava/lang/String;)V";
			IntPtr native_fcmDeviceToken = JNIEnv.NewString ((string)fcmDeviceToken);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_fcmDeviceToken);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_fcmDeviceToken);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='setGCMDeviceToken' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setGCMDeviceToken", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetGCMDeviceToken (string gcmDeviceToken)
		{
			const string __id = "setGCMDeviceToken.(Ljava/lang/String;)V";
			IntPtr native_gcmDeviceToken = JNIEnv.NewString ((string)gcmDeviceToken);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_gcmDeviceToken);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_gcmDeviceToken);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='setGlobalProperty' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='boolean']]"
		[Register ("setGlobalProperty", "(Ljava/lang/String;Ljava/lang/String;Z)Z", "")]
		public static unsafe bool SetGlobalProperty (string key, string value, bool overrideExisting)
		{
			const string __id = "setGlobalProperty.(Ljava/lang/String;Ljava/lang/String;Z)Z";
			IntPtr native_key = JNIEnv.NewString ((string)key);
			IntPtr native_value = JNIEnv.NewString ((string)value);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_key);
				__args [1] = new JniArgumentValue (native_value);
				__args [2] = new JniArgumentValue (overrideExisting);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_key);
				JNIEnv.DeleteLocalRef (native_value);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='setIMEI' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setIMEI", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetIMEI (string imei)
		{
			const string __id = "setIMEI.(Ljava/lang/String;)V";
			IntPtr native_imei = JNIEnv.NewString ((string)imei);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_imei);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_imei);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='setWrapperNameAndVersion' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("setWrapperNameAndVersion", "(Ljava/lang/String;Ljava/lang/String;)V", "")]
		public static unsafe void SetWrapperNameAndVersion (string wrapper, string version)
		{
			const string __id = "setWrapperNameAndVersion.(Ljava/lang/String;Ljava/lang/String;)V";
			IntPtr native_wrapper = JNIEnv.NewString ((string)wrapper);
			IntPtr native_version = JNIEnv.NewString ((string)version);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_wrapper);
				__args [1] = new JniArgumentValue (native_version);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_wrapper);
				JNIEnv.DeleteLocalRef (native_version);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='stopAllTracking' and count(parameter)=0]"
		[Register ("stopAllTracking", "()V", "")]
		public static unsafe void StopAllTracking ()
		{
			const string __id = "stopAllTracking.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='trackingOptIn' and count(parameter)=0]"
		[Register ("trackingOptIn", "()V", "")]
		public static unsafe void TrackingOptIn ()
		{
			const string __id = "trackingOptIn.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='trackingUnder13' and count(parameter)=0]"
		[Register ("trackingUnder13", "()V", "")]
		public static unsafe void TrackingUnder13 ()
		{
			const string __id = "trackingUnder13.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='unsetCustomUserId' and count(parameter)=0]"
		[Register ("unsetCustomUserId", "()V", "")]
		public static unsafe void UnsetCustomUserId ()
		{
			const string __id = "unsetCustomUserId.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.singular.sdk']/class[@name='Singular']/method[@name='unsetGlobalProperty' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("unsetGlobalProperty", "(Ljava/lang/String;)V", "")]
		public static unsafe void UnsetGlobalProperty (string key)
		{
			const string __id = "unsetGlobalProperty.(Ljava/lang/String;)V";
			IntPtr native_key = JNIEnv.NewString ((string)key);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_key);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_key);
			}
		}

	}
}
