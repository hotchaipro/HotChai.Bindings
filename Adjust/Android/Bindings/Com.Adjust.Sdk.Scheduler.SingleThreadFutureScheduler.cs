//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Adjust.Sdk.Scheduler {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.adjust.sdk.scheduler']/class[@name='SingleThreadFutureScheduler']"
	[global::Android.Runtime.Register ("com/adjust/sdk/scheduler/SingleThreadFutureScheduler", DoNotGenerateAcw=true)]
	public partial class SingleThreadFutureScheduler : global::Java.Lang.Object, global::Com.Adjust.Sdk.Scheduler.IFutureScheduler {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/adjust/sdk/scheduler/SingleThreadFutureScheduler", typeof (SingleThreadFutureScheduler));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected SingleThreadFutureScheduler (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.adjust.sdk.scheduler']/class[@name='SingleThreadFutureScheduler']/constructor[@name='SingleThreadFutureScheduler' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='boolean']]"
		[Register (".ctor", "(Ljava/lang/String;Z)V", "")]
		public unsafe SingleThreadFutureScheduler (string p0, bool p1) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Ljava/lang/String;Z)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_p0 = JNIEnv.NewString ((string)p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_p0);
				__args [1] = new JniArgumentValue (p1);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_p0);
			}
		}

		static Delegate cb_scheduleFuture_Ljava_lang_Runnable_J;
#pragma warning disable 0169
		static Delegate GetScheduleFuture_Ljava_lang_Runnable_JHandler ()
		{
			if (cb_scheduleFuture_Ljava_lang_Runnable_J == null)
				cb_scheduleFuture_Ljava_lang_Runnable_J = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLJ_L (n_ScheduleFuture_Ljava_lang_Runnable_J));
			return cb_scheduleFuture_Ljava_lang_Runnable_J;
		}

		static IntPtr n_ScheduleFuture_Ljava_lang_Runnable_J (IntPtr jnienv, IntPtr native__this, IntPtr native_p0, long p1)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Adjust.Sdk.Scheduler.SingleThreadFutureScheduler> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var p0 = (global::Java.Lang.IRunnable)global::Java.Lang.Object.GetObject<global::Java.Lang.IRunnable> (native_p0, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.ScheduleFuture (p0, p1));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.adjust.sdk.scheduler']/class[@name='SingleThreadFutureScheduler']/method[@name='scheduleFuture' and count(parameter)=2 and parameter[1][@type='java.lang.Runnable'] and parameter[2][@type='long']]"
		[Register ("scheduleFuture", "(Ljava/lang/Runnable;J)Ljava/util/concurrent/ScheduledFuture;", "GetScheduleFuture_Ljava_lang_Runnable_JHandler")]
		public virtual unsafe global::Java.Util.Concurrent.IScheduledFuture ScheduleFuture (global::Java.Lang.IRunnable p0, long p1)
		{
			const string __id = "scheduleFuture.(Ljava/lang/Runnable;J)Ljava/util/concurrent/ScheduledFuture;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Util.Concurrent.IScheduledFuture> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		static Delegate cb_scheduleFutureWithFixedDelay_Ljava_lang_Runnable_JJ;
#pragma warning disable 0169
		static Delegate GetScheduleFutureWithFixedDelay_Ljava_lang_Runnable_JJHandler ()
		{
			if (cb_scheduleFutureWithFixedDelay_Ljava_lang_Runnable_JJ == null)
				cb_scheduleFutureWithFixedDelay_Ljava_lang_Runnable_JJ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLJJ_L (n_ScheduleFutureWithFixedDelay_Ljava_lang_Runnable_JJ));
			return cb_scheduleFutureWithFixedDelay_Ljava_lang_Runnable_JJ;
		}

		static IntPtr n_ScheduleFutureWithFixedDelay_Ljava_lang_Runnable_JJ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0, long p1, long p2)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Adjust.Sdk.Scheduler.SingleThreadFutureScheduler> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var p0 = (global::Java.Lang.IRunnable)global::Java.Lang.Object.GetObject<global::Java.Lang.IRunnable> (native_p0, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.ScheduleFutureWithFixedDelay (p0, p1, p2));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.adjust.sdk.scheduler']/class[@name='SingleThreadFutureScheduler']/method[@name='scheduleFutureWithFixedDelay' and count(parameter)=3 and parameter[1][@type='java.lang.Runnable'] and parameter[2][@type='long'] and parameter[3][@type='long']]"
		[Register ("scheduleFutureWithFixedDelay", "(Ljava/lang/Runnable;JJ)Ljava/util/concurrent/ScheduledFuture;", "GetScheduleFutureWithFixedDelay_Ljava_lang_Runnable_JJHandler")]
		public virtual unsafe global::Java.Util.Concurrent.IScheduledFuture ScheduleFutureWithFixedDelay (global::Java.Lang.IRunnable p0, long p1, long p2)
		{
			const string __id = "scheduleFutureWithFixedDelay.(Ljava/lang/Runnable;JJ)Ljava/util/concurrent/ScheduledFuture;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				__args [1] = new JniArgumentValue (p1);
				__args [2] = new JniArgumentValue (p2);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Util.Concurrent.IScheduledFuture> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		static Delegate cb_scheduleFutureWithReturn_Ljava_util_concurrent_Callable_J;
#pragma warning disable 0169
		static Delegate GetScheduleFutureWithReturn_Ljava_util_concurrent_Callable_JHandler ()
		{
			if (cb_scheduleFutureWithReturn_Ljava_util_concurrent_Callable_J == null)
				cb_scheduleFutureWithReturn_Ljava_util_concurrent_Callable_J = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLJ_L (n_ScheduleFutureWithReturn_Ljava_util_concurrent_Callable_J));
			return cb_scheduleFutureWithReturn_Ljava_util_concurrent_Callable_J;
		}

		static IntPtr n_ScheduleFutureWithReturn_Ljava_util_concurrent_Callable_J (IntPtr jnienv, IntPtr native__this, IntPtr native_p0, long p1)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Adjust.Sdk.Scheduler.SingleThreadFutureScheduler> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var p0 = (global::Java.Util.Concurrent.ICallable)global::Java.Lang.Object.GetObject<global::Java.Util.Concurrent.ICallable> (native_p0, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.ScheduleFutureWithReturn (p0, p1));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.adjust.sdk.scheduler']/class[@name='SingleThreadFutureScheduler']/method[@name='scheduleFutureWithReturn' and count(parameter)=2 and parameter[1][@type='java.util.concurrent.Callable&lt;V&gt;'] and parameter[2][@type='long']]"
		[Register ("scheduleFutureWithReturn", "(Ljava/util/concurrent/Callable;J)Ljava/util/concurrent/ScheduledFuture;", "GetScheduleFutureWithReturn_Ljava_util_concurrent_Callable_JHandler")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"V"})]
		public virtual unsafe global::Java.Util.Concurrent.IScheduledFuture ScheduleFutureWithReturn (global::Java.Util.Concurrent.ICallable p0, long p1)
		{
			const string __id = "scheduleFutureWithReturn.(Ljava/util/concurrent/Callable;J)Ljava/util/concurrent/ScheduledFuture;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Util.Concurrent.IScheduledFuture> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		static Delegate cb_teardown;
#pragma warning disable 0169
		static Delegate GetTeardownHandler ()
		{
			if (cb_teardown == null)
				cb_teardown = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_Teardown));
			return cb_teardown;
		}

		static void n_Teardown (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Adjust.Sdk.Scheduler.SingleThreadFutureScheduler> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			__this.Teardown ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.adjust.sdk.scheduler']/class[@name='SingleThreadFutureScheduler']/method[@name='teardown' and count(parameter)=0]"
		[Register ("teardown", "()V", "GetTeardownHandler")]
		public virtual unsafe void Teardown ()
		{
			const string __id = "teardown.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

	}
}
