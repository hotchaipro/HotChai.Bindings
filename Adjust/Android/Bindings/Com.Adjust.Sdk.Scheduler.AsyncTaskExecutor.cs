//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Adjust.Sdk.Scheduler {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.adjust.sdk.scheduler']/class[@name='AsyncTaskExecutor']"
	[global::Android.Runtime.Register ("com/adjust/sdk/scheduler/AsyncTaskExecutor", DoNotGenerateAcw=true)]
	[global::Java.Interop.JavaTypeParameters (new string [] {"Params", "Result"})]
	public abstract partial class AsyncTaskExecutor : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/adjust/sdk/scheduler/AsyncTaskExecutor", typeof (AsyncTaskExecutor));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected AsyncTaskExecutor (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.adjust.sdk.scheduler']/class[@name='AsyncTaskExecutor']/constructor[@name='AsyncTaskExecutor' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe AsyncTaskExecutor () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		static Delegate cb_doInBackground_arrayLjava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetDoInBackground_arrayLjava_lang_Object_Handler ()
		{
			if (cb_doInBackground_arrayLjava_lang_Object_ == null)
				cb_doInBackground_arrayLjava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_DoInBackground_arrayLjava_lang_Object_));
			return cb_doInBackground_arrayLjava_lang_Object_;
		}

		static IntPtr n_DoInBackground_arrayLjava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Adjust.Sdk.Scheduler.AsyncTaskExecutor> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var p0 = (global::Java.Lang.Object[]) JNIEnv.GetArray (native_p0, JniHandleOwnership.DoNotTransfer, typeof (global::Java.Lang.Object));
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.DoInBackground (p0));
			if (p0 != null)
				JNIEnv.CopyArray (p0, native_p0);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.adjust.sdk.scheduler']/class[@name='AsyncTaskExecutor']/method[@name='doInBackground' and count(parameter)=1 and parameter[1][@type='Params[]']]"
		[Register ("doInBackground", "([Ljava/lang/Object;)Ljava/lang/Object;", "GetDoInBackground_arrayLjava_lang_Object_Handler")]
		public abstract global::Java.Lang.Object DoInBackground (global::Java.Lang.Object[] p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='com.adjust.sdk.scheduler']/class[@name='AsyncTaskExecutor']/method[@name='execute' and count(parameter)=1 and parameter[1][@type='Params...']]"
		[Register ("execute", "([Ljava/lang/Object;)Lcom/adjust/sdk/scheduler/AsyncTaskExecutor;", "")]
		public unsafe global::Com.Adjust.Sdk.Scheduler.AsyncTaskExecutor Execute (params global::Java.Lang.Object[] p0)
		{
			const string __id = "execute.([Ljava/lang/Object;)Lcom/adjust/sdk/scheduler/AsyncTaskExecutor;";
			IntPtr native_p0 = JNIEnv.NewArray (p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_p0);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Adjust.Sdk.Scheduler.AsyncTaskExecutor> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (p0 != null) {
					JNIEnv.CopyArray (native_p0, p0);
					JNIEnv.DeleteLocalRef (native_p0);
				}
				global::System.GC.KeepAlive (p0);
			}
		}

		static Delegate cb_onPostExecute_Ljava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetOnPostExecute_Ljava_lang_Object_Handler ()
		{
			if (cb_onPostExecute_Ljava_lang_Object_ == null)
				cb_onPostExecute_Ljava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_OnPostExecute_Ljava_lang_Object_));
			return cb_onPostExecute_Ljava_lang_Object_;
		}

		static void n_OnPostExecute_Ljava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Adjust.Sdk.Scheduler.AsyncTaskExecutor> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var p0 = global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (native_p0, JniHandleOwnership.DoNotTransfer);
			__this.OnPostExecute (p0);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.adjust.sdk.scheduler']/class[@name='AsyncTaskExecutor']/method[@name='onPostExecute' and count(parameter)=1 and parameter[1][@type='Result']]"
		[Register ("onPostExecute", "(Ljava/lang/Object;)V", "GetOnPostExecute_Ljava_lang_Object_Handler")]
		public virtual unsafe void OnPostExecute (global::Java.Lang.Object p0)
		{
			const string __id = "onPostExecute.(Ljava/lang/Object;)V";
			IntPtr native_p0 = JNIEnv.ToLocalJniHandle (p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_p0);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_p0);
				global::System.GC.KeepAlive (p0);
			}
		}

		static Delegate cb_onPreExecute;
#pragma warning disable 0169
		static Delegate GetOnPreExecuteHandler ()
		{
			if (cb_onPreExecute == null)
				cb_onPreExecute = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_OnPreExecute));
			return cb_onPreExecute;
		}

		static void n_OnPreExecute (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Adjust.Sdk.Scheduler.AsyncTaskExecutor> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			__this.OnPreExecute ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.adjust.sdk.scheduler']/class[@name='AsyncTaskExecutor']/method[@name='onPreExecute' and count(parameter)=0]"
		[Register ("onPreExecute", "()V", "GetOnPreExecuteHandler")]
		public virtual unsafe void OnPreExecute ()
		{
			const string __id = "onPreExecute.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

	}

	[global::Android.Runtime.Register ("com/adjust/sdk/scheduler/AsyncTaskExecutor", DoNotGenerateAcw=true)]
	internal partial class AsyncTaskExecutorInvoker : AsyncTaskExecutor {
		public AsyncTaskExecutorInvoker (IntPtr handle, JniHandleOwnership transfer) : base (handle, transfer)
		{
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/adjust/sdk/scheduler/AsyncTaskExecutor", typeof (AsyncTaskExecutorInvoker));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.adjust.sdk.scheduler']/class[@name='AsyncTaskExecutor']/method[@name='doInBackground' and count(parameter)=1 and parameter[1][@type='Params[]']]"
		[Register ("doInBackground", "([Ljava/lang/Object;)Ljava/lang/Object;", "GetDoInBackground_arrayLjava_lang_Object_Handler")]
		public override unsafe global::Java.Lang.Object DoInBackground (global::Java.Lang.Object[] p0)
		{
			const string __id = "doInBackground.([Ljava/lang/Object;)Ljava/lang/Object;";
			IntPtr native_p0 = JNIEnv.NewArray (p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return (global::Java.Lang.Object) global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (p0 != null) {
					JNIEnv.CopyArray (native_p0, p0);
					JNIEnv.DeleteLocalRef (native_p0);
				}
				global::System.GC.KeepAlive (p0);
			}
		}

	}
}
