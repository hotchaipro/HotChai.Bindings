//
// Auto-generated from generator.cs, do not edit
//
// We keep references to objects, so warning 414 is expected
#pragma warning disable 414
using System;
using System.Drawing;
using System.Diagnostics;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Runtime.Versioning;
using System.Runtime.InteropServices;
using System.Diagnostics.CodeAnalysis;
using UIKit;
using GLKit;
using Metal;
using CoreML;
using MapKit;
using Photos;
using ModelIO;
using Network;
using SceneKit;
using Contacts;
using Security;
using Messages;
using AudioUnit;
using CoreVideo;
using CoreMedia;
using QuickLook;
using CoreImage;
using SpriteKit;
using Foundation;
using CoreMotion;
using ObjCRuntime;
using AddressBook;
using MediaPlayer;
using GameplayKit;
using CoreGraphics;
using CoreLocation;
using AVFoundation;
using NewsstandKit;
using FileProvider;
using CoreAnimation;
using CoreFoundation;
using NetworkExtension;
using MetalPerformanceShadersGraph;
#nullable enable
#if !NET
using NativeHandle = System.IntPtr;
#endif
namespace ByteBrew {
	[Register("ByteBrewNativeiOSPlugin", true)]
	public unsafe partial class ByteBrewNativeiOSPlugin : NSObject {
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		static readonly NativeHandle class_ptr = Class.GetHandle ("ByteBrewNativeiOSPlugin");
		/// <summary>The Objective-C class handle for this class.</summary>
		/// <value>The pointer to the Objective-C class.</value>
		/// <remarks>
		///     Each managed class mirrors an unmanaged Objective-C class.
		///     This value contains the pointer to the Objective-C class.
		///     It is similar to calling the managed <see cref="global::ByteBrew.ObjCRuntime.Class.GetHandle(string)" /> or the native <see href="https://developer.apple.com/documentation/objectivec/1418952-objc_getclass">objc_getClass</see> method with the type name.
		/// </remarks>
		public override NativeHandle ClassHandle { get { return class_ptr; } }
		/// <summary>Creates a new <see cref="ByteBrewNativeiOSPlugin" /> with default values.</summary>
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		[EditorBrowsable (EditorBrowsableState.Advanced)]
		[Export ("init")]
		public ByteBrewNativeiOSPlugin () : base (NSObjectFlag.Empty)
		{
			IsDirectBinding = GetType ().Assembly == global::ByteBrew.ApiDefinitions.Messaging.this_assembly;
			if (IsDirectBinding) {
				InitializeHandle (global::ByteBrew.ApiDefinitions.Messaging.IntPtr_objc_msgSend (this.Handle, Selector.GetHandle ("init")), "init");
			} else {
				InitializeHandle (global::ByteBrew.ApiDefinitions.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, Selector.GetHandle ("init")), "init");
			}
		}

		/// <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
		/// <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
		/// <remarks>
		///     <para>
		///         This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the <see cref="Foundation.NSObject" />.
		///         This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.
		///         When developers invoke this constructor, they take advantage of a direct path that goes all the way up to <see cref="Foundation.NSObject" /> to merely allocate the object's memory and bind the Objective-C and C# objects together.
		///         The actual initialization of the object is up to the developer.
		///     </para>
		///     <para>
		///         This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.
		///         Once the allocation has taken place, the constructor has to initialize the object.
		///         With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
		///     </para>
		///     <para>It is the developer's responsibility to completely initialize the object if they chain up using this constructor chain.</para>
		///     <para>
		///         In general, if the developer's constructor invokes the corresponding base implementation, then it should also call an Objective-C init method.
		///         If this is not the case, developers should instead chain to the proper constructor in their class.
		///     </para>
		///     <para>
		///         The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic <see cref="Foundation.NSObject" /> allocation and runtime type registration.
		///         Typically the chaining would look like this:
		///     </para>
		///     <example>
		///             <code lang="csharp lang-csharp"><![CDATA[
		/// //
		/// // The NSObjectFlag constructor merely allocates the object and registers the C# class with the Objective-C runtime if necessary.
		/// // No actual initXxx method is invoked, that is done later in the constructor
		/// //
		/// // This is taken from the iOS SDK's source code for the UIView class:
		/// //
		/// [Export ("initWithFrame:")]
		/// public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
		/// {
		///     // Invoke the init method now.
		///     var initWithFrame = new Selector ("initWithFrame:").Handle;
		///     if (IsDirectBinding) {
		///         Handle = global::ByteBrew.ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
		///     } else {
		///         Handle = global::ByteBrew.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
		///     }
		/// }
		/// ]]></code>
		///     </example>
		/// </remarks>
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		[EditorBrowsable (EditorBrowsableState.Advanced)]
		protected ByteBrewNativeiOSPlugin (NSObjectFlag t) : base (t)
		{
			IsDirectBinding = GetType ().Assembly == global::ByteBrew.ApiDefinitions.Messaging.this_assembly;
		}

		/// <summary>A constructor used when creating managed representations of unmanaged objects. Called by the runtime.</summary>
		/// <param name="handle">Pointer (handle) to the unmanaged object.</param>
		/// <remarks>
		///     <para>
		///         This constructor is invoked by the runtime infrastructure (<see cref="global::ByteBrew.ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.
		///         Developers should not invoke this method directly, instead they should call <see cref="global::ByteBrew.ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" /> as it will prevent two instances of a managed object pointing to the same native object.
		///     </para>
		/// </remarks>
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		[EditorBrowsable (EditorBrowsableState.Advanced)]
		protected internal ByteBrewNativeiOSPlugin (NativeHandle handle) : base (handle)
		{
			IsDirectBinding = GetType ().Assembly == global::ByteBrew.ApiDefinitions.Messaging.this_assembly;
		}

		[Export ("AddCustomDataAttributeWithBooleanValue:Value:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void AddCustomDataAttributeWithBooleanValue (string key, bool value)
		{
			if (key is null)
				ThrowHelper.ThrowArgumentNullException (nameof (key));
			var nskey = CFString.CreateNative (key);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle_bool (class_ptr, Selector.GetHandle ("AddCustomDataAttributeWithBooleanValue:Value:"), nskey, value ? (byte) 1 : (byte) 0);
			CFString.ReleaseNative (nskey);
		}
		[Export ("AddCustomDataAttributeWithDoubleValue:Value:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void AddCustomDataAttributeWithDoubleValue (string key, double value)
		{
			if (key is null)
				ThrowHelper.ThrowArgumentNullException (nameof (key));
			var nskey = CFString.CreateNative (key);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle_Double (class_ptr, Selector.GetHandle ("AddCustomDataAttributeWithDoubleValue:Value:"), nskey, value);
			CFString.ReleaseNative (nskey);
		}
		[Export ("AddCustomDataAttributeWithIntegerValue:Value:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void AddCustomDataAttributeWithIntegerValue (string key, int value)
		{
			if (key is null)
				ThrowHelper.ThrowArgumentNullException (nameof (key));
			var nskey = CFString.CreateNative (key);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle_int (class_ptr, Selector.GetHandle ("AddCustomDataAttributeWithIntegerValue:Value:"), nskey, value);
			CFString.ReleaseNative (nskey);
		}
		[Export ("AddCustomDataAttributeWithStringValue:Value:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void AddCustomDataAttributeWithStringValue (string key, string value)
		{
			if (key is null)
				ThrowHelper.ThrowArgumentNullException (nameof (key));
			if (value is null)
				ThrowHelper.ThrowArgumentNullException (nameof (value));
			var nskey = CFString.CreateNative (key);
			var nsvalue = CFString.CreateNative (value);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle_NativeHandle (class_ptr, Selector.GetHandle ("AddCustomDataAttributeWithStringValue:Value:"), nskey, nsvalue);
			CFString.ReleaseNative (nskey);
			CFString.ReleaseNative (nsvalue);
		}
		[Export ("AddNewCustomEvent:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void AddNewCustomEvent (string eventName)
		{
			if (eventName is null)
				ThrowHelper.ThrowArgumentNullException (nameof (eventName));
			var nseventName = CFString.CreateNative (eventName);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle (class_ptr, Selector.GetHandle ("AddNewCustomEvent:"), nseventName);
			CFString.ReleaseNative (nseventName);
		}
		[Export ("AddNewCustomEventWithNumericValue:Value:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void AddNewCustomEventWithNumericValue (string eventName, double value)
		{
			if (eventName is null)
				ThrowHelper.ThrowArgumentNullException (nameof (eventName));
			var nseventName = CFString.CreateNative (eventName);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle_Double (class_ptr, Selector.GetHandle ("AddNewCustomEventWithNumericValue:Value:"), nseventName, value);
			CFString.ReleaseNative (nseventName);
		}
		[Export ("AddNewCustomEventWithStringValue:Value:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void AddNewCustomEventWithStringValue (string eventName, string value)
		{
			if (eventName is null)
				ThrowHelper.ThrowArgumentNullException (nameof (eventName));
			if (value is null)
				ThrowHelper.ThrowArgumentNullException (nameof (value));
			var nseventName = CFString.CreateNative (eventName);
			var nsvalue = CFString.CreateNative (value);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle_NativeHandle (class_ptr, Selector.GetHandle ("AddNewCustomEventWithStringValue:Value:"), nseventName, nsvalue);
			CFString.ReleaseNative (nseventName);
			CFString.ReleaseNative (nsvalue);
		}
		[Export ("AddProgressionEvent:Environment:Stage:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void AddProgressionEvent (ByteBrewProgressionType progressionStatus, string environment, string stage)
		{
			if (environment is null)
				ThrowHelper.ThrowArgumentNullException (nameof (environment));
			if (stage is null)
				ThrowHelper.ThrowArgumentNullException (nameof (stage));
			var nsenvironment = CFString.CreateNative (environment);
			var nsstage = CFString.CreateNative (stage);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_UInt32_NativeHandle_NativeHandle (class_ptr, Selector.GetHandle ("AddProgressionEvent:Environment:Stage:"), (UInt32)progressionStatus, nsenvironment, nsstage);
			CFString.ReleaseNative (nsenvironment);
			CFString.ReleaseNative (nsstage);
		}
		[Export ("AddProgressionEventWithNumericValue:Environment:Stage:Value:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void AddProgressionEventWithNumericValue (ByteBrewProgressionType progressionStatus, string environment, string stage, double value)
		{
			if (environment is null)
				ThrowHelper.ThrowArgumentNullException (nameof (environment));
			if (stage is null)
				ThrowHelper.ThrowArgumentNullException (nameof (stage));
			var nsenvironment = CFString.CreateNative (environment);
			var nsstage = CFString.CreateNative (stage);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_UInt32_NativeHandle_NativeHandle_Double (class_ptr, Selector.GetHandle ("AddProgressionEventWithNumericValue:Environment:Stage:Value:"), (UInt32)progressionStatus, nsenvironment, nsstage, value);
			CFString.ReleaseNative (nsenvironment);
			CFString.ReleaseNative (nsstage);
		}
		[Export ("AddProgressionEventWithStringValue:Environment:Stage:Value:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void AddProgressionEventWithStringValue (ByteBrewProgressionType progressionStatus, string environment, string stage, string value)
		{
			if (environment is null)
				ThrowHelper.ThrowArgumentNullException (nameof (environment));
			if (stage is null)
				ThrowHelper.ThrowArgumentNullException (nameof (stage));
			if (value is null)
				ThrowHelper.ThrowArgumentNullException (nameof (value));
			var nsenvironment = CFString.CreateNative (environment);
			var nsstage = CFString.CreateNative (stage);
			var nsvalue = CFString.CreateNative (value);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_UInt32_NativeHandle_NativeHandle_NativeHandle (class_ptr, Selector.GetHandle ("AddProgressionEventWithStringValue:Environment:Stage:Value:"), (UInt32)progressionStatus, nsenvironment, nsstage, nsvalue);
			CFString.ReleaseNative (nsenvironment);
			CFString.ReleaseNative (nsstage);
			CFString.ReleaseNative (nsvalue);
		}
		[Export ("AddTrackedInAppPurchaseEvent:Currency:Amount:ItemID:Category:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void AddTrackedInAppPurchaseEvent (string store, string currency, double amount, string itemID, string category)
		{
			if (store is null)
				ThrowHelper.ThrowArgumentNullException (nameof (store));
			if (currency is null)
				ThrowHelper.ThrowArgumentNullException (nameof (currency));
			if (itemID is null)
				ThrowHelper.ThrowArgumentNullException (nameof (itemID));
			if (category is null)
				ThrowHelper.ThrowArgumentNullException (nameof (category));
			var nsstore = CFString.CreateNative (store);
			var nscurrency = CFString.CreateNative (currency);
			var nsitemID = CFString.CreateNative (itemID);
			var nscategory = CFString.CreateNative (category);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_Double_NativeHandle_NativeHandle (class_ptr, Selector.GetHandle ("AddTrackedInAppPurchaseEvent:Currency:Amount:ItemID:Category:"), nsstore, nscurrency, amount, nsitemID, nscategory);
			CFString.ReleaseNative (nsstore);
			CFString.ReleaseNative (nscurrency);
			CFString.ReleaseNative (nsitemID);
			CFString.ReleaseNative (nscategory);
		}
		[Export ("AddTrackediOSInAppPurchaseEvent:Currency:Amount:ItemID:Category:Receipt:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void AddTrackediOSInAppPurchaseEvent (string store, string currency, double amount, string itemID, string category, string receipt)
		{
			if (store is null)
				ThrowHelper.ThrowArgumentNullException (nameof (store));
			if (currency is null)
				ThrowHelper.ThrowArgumentNullException (nameof (currency));
			if (itemID is null)
				ThrowHelper.ThrowArgumentNullException (nameof (itemID));
			if (category is null)
				ThrowHelper.ThrowArgumentNullException (nameof (category));
			if (receipt is null)
				ThrowHelper.ThrowArgumentNullException (nameof (receipt));
			var nsstore = CFString.CreateNative (store);
			var nscurrency = CFString.CreateNative (currency);
			var nsitemID = CFString.CreateNative (itemID);
			var nscategory = CFString.CreateNative (category);
			var nsreceipt = CFString.CreateNative (receipt);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_Double_NativeHandle_NativeHandle_NativeHandle (class_ptr, Selector.GetHandle ("AddTrackediOSInAppPurchaseEvent:Currency:Amount:ItemID:Category:Receipt:"), nsstore, nscurrency, amount, nsitemID, nscategory, nsreceipt);
			CFString.ReleaseNative (nsstore);
			CFString.ReleaseNative (nscurrency);
			CFString.ReleaseNative (nsitemID);
			CFString.ReleaseNative (nscategory);
			CFString.ReleaseNative (nsreceipt);
		}
		[Export ("InitializeWithSettings:SecretKey:EngineVersion:BuildVersion:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void InitializeWithSettings (string gameID, string secretKey, string engineV, string buildV)
		{
			if (gameID is null)
				ThrowHelper.ThrowArgumentNullException (nameof (gameID));
			if (secretKey is null)
				ThrowHelper.ThrowArgumentNullException (nameof (secretKey));
			if (engineV is null)
				ThrowHelper.ThrowArgumentNullException (nameof (engineV));
			if (buildV is null)
				ThrowHelper.ThrowArgumentNullException (nameof (buildV));
			var nsgameID = CFString.CreateNative (gameID);
			var nssecretKey = CFString.CreateNative (secretKey);
			var nsengineV = CFString.CreateNative (engineV);
			var nsbuildV = CFString.CreateNative (buildV);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_NativeHandle (class_ptr, Selector.GetHandle ("InitializeWithSettings:SecretKey:EngineVersion:BuildVersion:"), nsgameID, nssecretKey, nsengineV, nsbuildV);
			CFString.ReleaseNative (nsgameID);
			CFString.ReleaseNative (nssecretKey);
			CFString.ReleaseNative (nsengineV);
			CFString.ReleaseNative (nsbuildV);
		}
		[Export ("LoadRemoteConfigs:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public unsafe static void LoadRemoteConfigs ([BlockProxy (typeof (global::ByteBrew.ObjCRuntime.Trampolines.NIDFinishedRetrieval))]FinishedRetrieval finished)
		{
			if (finished is null)
				ThrowHelper.ThrowArgumentNullException (nameof (finished));
			using var block_finished = global::ByteBrew.ObjCRuntime.Trampolines.SDFinishedRetrieval.CreateBlock (finished);
			BlockLiteral *block_ptr_finished = &block_finished;
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle (class_ptr, Selector.GetHandle ("LoadRemoteConfigs:"), (IntPtr) block_ptr_finished);
		}
		[Export ("LowLevelPushStart")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void LowLevelPushStart ()
		{
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend (class_ptr, Selector.GetHandle ("LowLevelPushStart"));
		}
		[Export ("NewTrackedAdEvent:AdLocation:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void NewTrackedAdEvent (string placementType, string adLoaction)
		{
			if (placementType is null)
				ThrowHelper.ThrowArgumentNullException (nameof (placementType));
			if (adLoaction is null)
				ThrowHelper.ThrowArgumentNullException (nameof (adLoaction));
			var nsplacementType = CFString.CreateNative (placementType);
			var nsadLoaction = CFString.CreateNative (adLoaction);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle_NativeHandle (class_ptr, Selector.GetHandle ("NewTrackedAdEvent:AdLocation:"), nsplacementType, nsadLoaction);
			CFString.ReleaseNative (nsplacementType);
			CFString.ReleaseNative (nsadLoaction);
		}
		[Export ("NewTrackedAdEvent:AdLocation:AdID:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void NewTrackedAdEvent (string placementType, string adLocation, string adID)
		{
			if (placementType is null)
				ThrowHelper.ThrowArgumentNullException (nameof (placementType));
			if (adLocation is null)
				ThrowHelper.ThrowArgumentNullException (nameof (adLocation));
			if (adID is null)
				ThrowHelper.ThrowArgumentNullException (nameof (adID));
			var nsplacementType = CFString.CreateNative (placementType);
			var nsadLocation = CFString.CreateNative (adLocation);
			var nsadID = CFString.CreateNative (adID);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle (class_ptr, Selector.GetHandle ("NewTrackedAdEvent:AdLocation:AdID:"), nsplacementType, nsadLocation, nsadID);
			CFString.ReleaseNative (nsplacementType);
			CFString.ReleaseNative (nsadLocation);
			CFString.ReleaseNative (nsadID);
		}
		[Export ("NewTrackedAdEvent:AdLocation:AdID:AdProvider:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void NewTrackedAdEvent (string placementType, string adLocation, string adID, string adProvider)
		{
			if (placementType is null)
				ThrowHelper.ThrowArgumentNullException (nameof (placementType));
			if (adLocation is null)
				ThrowHelper.ThrowArgumentNullException (nameof (adLocation));
			if (adID is null)
				ThrowHelper.ThrowArgumentNullException (nameof (adID));
			if (adProvider is null)
				ThrowHelper.ThrowArgumentNullException (nameof (adProvider));
			var nsplacementType = CFString.CreateNative (placementType);
			var nsadLocation = CFString.CreateNative (adLocation);
			var nsadID = CFString.CreateNative (adID);
			var nsadProvider = CFString.CreateNative (adProvider);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_NativeHandle (class_ptr, Selector.GetHandle ("NewTrackedAdEvent:AdLocation:AdID:AdProvider:"), nsplacementType, nsadLocation, nsadID, nsadProvider);
			CFString.ReleaseNative (nsplacementType);
			CFString.ReleaseNative (nsadLocation);
			CFString.ReleaseNative (nsadID);
			CFString.ReleaseNative (nsadProvider);
		}
		[Export ("NewTrackedAdEvent:AdProvider:AdUnitName:Revenue:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void NewTrackedAdEvent (string placementType, string adProvider, string adUnitName, double revenue)
		{
			if (placementType is null)
				ThrowHelper.ThrowArgumentNullException (nameof (placementType));
			if (adProvider is null)
				ThrowHelper.ThrowArgumentNullException (nameof (adProvider));
			if (adUnitName is null)
				ThrowHelper.ThrowArgumentNullException (nameof (adUnitName));
			var nsplacementType = CFString.CreateNative (placementType);
			var nsadProvider = CFString.CreateNative (adProvider);
			var nsadUnitName = CFString.CreateNative (adUnitName);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_Double (class_ptr, Selector.GetHandle ("NewTrackedAdEvent:AdProvider:AdUnitName:Revenue:"), nsplacementType, nsadProvider, nsadUnitName, revenue);
			CFString.ReleaseNative (nsplacementType);
			CFString.ReleaseNative (nsadProvider);
			CFString.ReleaseNative (nsadUnitName);
		}
		[Export ("NewTrackedAdEvent:AdProvider:AdUnitName:AdLocation:Revenue:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void NewTrackedAdEvent (string placementType, string adProvider, string adUnitName, string adLocation, double revenue)
		{
			if (placementType is null)
				ThrowHelper.ThrowArgumentNullException (nameof (placementType));
			if (adProvider is null)
				ThrowHelper.ThrowArgumentNullException (nameof (adProvider));
			if (adUnitName is null)
				ThrowHelper.ThrowArgumentNullException (nameof (adUnitName));
			if (adLocation is null)
				ThrowHelper.ThrowArgumentNullException (nameof (adLocation));
			var nsplacementType = CFString.CreateNative (placementType);
			var nsadProvider = CFString.CreateNative (adProvider);
			var nsadUnitName = CFString.CreateNative (adUnitName);
			var nsadLocation = CFString.CreateNative (adLocation);
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_NativeHandle_Double (class_ptr, Selector.GetHandle ("NewTrackedAdEvent:AdProvider:AdUnitName:AdLocation:Revenue:"), nsplacementType, nsadProvider, nsadUnitName, nsadLocation, revenue);
			CFString.ReleaseNative (nsplacementType);
			CFString.ReleaseNative (nsadProvider);
			CFString.ReleaseNative (nsadUnitName);
			CFString.ReleaseNative (nsadLocation);
		}
		[Export ("RestartTracking")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void RestartTracking ()
		{
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend (class_ptr, Selector.GetHandle ("RestartTracking"));
		}
		[Export ("RetrieveRemoteConfigs:DefaultValue:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static string RetrieveRemoteConfigs (string key, string defaultValue)
		{
			if (key is null)
				ThrowHelper.ThrowArgumentNullException (nameof (key));
			if (defaultValue is null)
				ThrowHelper.ThrowArgumentNullException (nameof (defaultValue));
			var nskey = CFString.CreateNative (key);
			var nsdefaultValue = CFString.CreateNative (defaultValue);
			string? ret;
			ret = CFString.FromHandle (global::ByteBrew.ApiDefinitions.Messaging.NativeHandle_objc_msgSend_NativeHandle_NativeHandle (class_ptr, Selector.GetHandle ("RetrieveRemoteConfigs:DefaultValue:"), nskey, nsdefaultValue))!;
			CFString.ReleaseNative (nskey);
			CFString.ReleaseNative (nsdefaultValue);
			return ret!;
		}
		[Export ("StartPushNotification")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void StartPushNotification ()
		{
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend (class_ptr, Selector.GetHandle ("StartPushNotification"));
		}
		[Export ("StartPushNotification:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void StartPushNotification (NSDictionary launchOptions)
		{
			var launchOptions__handle__ = launchOptions!.GetNonNullHandle (nameof (launchOptions));
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle (class_ptr, Selector.GetHandle ("StartPushNotification:"), launchOptions__handle__);
		}
		[Export ("StopTracking")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static void StopTracking ()
		{
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend (class_ptr, Selector.GetHandle ("StopTracking"));
		}
		[Export ("ValidateiOSInAppPurchaseEvent:Currency:Amount:ItemID:Category:Receipt:finishedValidationResult:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public unsafe static void ValidateiOSInAppPurchaseEvent (string store, string currency, double amount, string itemID, string category, string receipt, [BlockProxy (typeof (global::ByteBrew.ObjCRuntime.Trampolines.NIDFinishedValidation))]FinishedValidation validationResult)
		{
			if (store is null)
				ThrowHelper.ThrowArgumentNullException (nameof (store));
			if (currency is null)
				ThrowHelper.ThrowArgumentNullException (nameof (currency));
			if (itemID is null)
				ThrowHelper.ThrowArgumentNullException (nameof (itemID));
			if (category is null)
				ThrowHelper.ThrowArgumentNullException (nameof (category));
			if (receipt is null)
				ThrowHelper.ThrowArgumentNullException (nameof (receipt));
			if (validationResult is null)
				ThrowHelper.ThrowArgumentNullException (nameof (validationResult));
			var nsstore = CFString.CreateNative (store);
			var nscurrency = CFString.CreateNative (currency);
			var nsitemID = CFString.CreateNative (itemID);
			var nscategory = CFString.CreateNative (category);
			var nsreceipt = CFString.CreateNative (receipt);
			using var block_validationResult = global::ByteBrew.ObjCRuntime.Trampolines.SDFinishedValidation.CreateBlock (validationResult);
			BlockLiteral *block_ptr_validationResult = &block_validationResult;
			global::ByteBrew.ApiDefinitions.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_Double_NativeHandle_NativeHandle_NativeHandle_NativeHandle (class_ptr, Selector.GetHandle ("ValidateiOSInAppPurchaseEvent:Currency:Amount:ItemID:Category:Receipt:finishedValidationResult:"), nsstore, nscurrency, amount, nsitemID, nscategory, nsreceipt, (IntPtr) block_ptr_validationResult);
			CFString.ReleaseNative (nsstore);
			CFString.ReleaseNative (nscurrency);
			CFString.ReleaseNative (nsitemID);
			CFString.ReleaseNative (nscategory);
			CFString.ReleaseNative (nsreceipt);
		}
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static bool HasRemoteConfigs {
			[Export ("HasRemoteConfigs")]
			get {
				byte ret;
				ret = global::ByteBrew.ApiDefinitions.Messaging.bool_objc_msgSend (class_ptr, Selector.GetHandle ("HasRemoteConfigs"));
				return ret != 0;
			}
		}
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static bool IsByteBrewInitialized {
			[Export ("IsByteBrewInitialized")]
			get {
				byte ret;
				ret = global::ByteBrew.ApiDefinitions.Messaging.bool_objc_msgSend (class_ptr, Selector.GetHandle ("IsByteBrewInitialized"));
				return ret != 0;
			}
		}
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public static string UserID {
			[Export ("GetUserID")]
			get {
				return CFString.FromHandle (global::ByteBrew.ApiDefinitions.Messaging.NativeHandle_objc_msgSend (class_ptr, Selector.GetHandle ("GetUserID")))!;
			}
		}
	} /* class ByteBrewNativeiOSPlugin */
}
